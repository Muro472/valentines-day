[{"/Users/muromac/uni/miroslavaLabs/src/main.ts":"1","/Users/muromac/uni/miroslavaLabs/src/App.vue":"2","/Users/muromac/uni/miroslavaLabs/src/router/index.ts":"3","/Users/muromac/uni/miroslavaLabs/src/store/index.ts":"4","/Users/muromac/uni/miroslavaLabs/src/views/labOne.vue":"5","/Users/muromac/uni/miroslavaLabs/src/views/labTwo.vue":"6","/Users/muromac/uni/miroslavaLabs/src/views/labThree.vue":"7","/Users/muromac/uni/miroslavaLabs/src/views/labSix.vue":"8","/Users/muromac/uni/miroslavaLabs/src/views/labFour.vue":"9","/Users/muromac/uni/miroslavaLabs/src/functions/determinant.ts":"10","/Users/muromac/uni/miroslavaLabs/src/functions/gaus.ts":"11","/Users/muromac/uni/miroslavaLabs/src/functions/zeidel.ts":"12","/Users/muromac/uni/miroslavaLabs/src/functions/jakobi.ts":"13","/Users/muromac/uni/miroslavaLabs/src/functions/inverse.ts":"14","/Users/muromac/uni/miroslavaLabs/src/views/labSeven.vue":"15","/Users/muromac/uni/testing/src/main.ts":"16","/Users/muromac/uni/testing/src/App.vue":"17","/Users/muromac/uni/testing/src/store/index.ts":"18","/Users/muromac/uni/testing/src/router/index.ts":"19","/Users/muromac/uni/testing/src/views/mainPage.vue":"20","/Users/muromac/uni/testing/src/views/GraphicPage.vue":"21","/Users/muromac/uni/testing/src/views/MainPage.vue":"22","/Users/muromac/uni/testing/src/funcs/ExectSolutionToEqasion.ts":"23"},{"size":176,"mtime":1671470477628,"results":"24","hashOfConfig":"25"},{"size":289,"mtime":1671470477627,"results":"26","hashOfConfig":"25"},{"size":953,"mtime":1674694276031,"results":"27","hashOfConfig":"25"},{"size":115,"mtime":1671470477628,"results":"28","hashOfConfig":"25"},{"size":2395,"mtime":1671470477629,"results":"29","hashOfConfig":"25"},{"size":2142,"mtime":1671470477629,"results":"30","hashOfConfig":"25"},{"size":8500,"mtime":1674607616204,"results":"31","hashOfConfig":"25"},{"size":7125,"mtime":1674779720784,"results":"32","hashOfConfig":"25"},{"size":2834,"mtime":1674466737080,"results":"33","hashOfConfig":"25"},{"size":554,"mtime":1671470477627,"results":"34","hashOfConfig":"25"},{"size":1352,"mtime":1671470477627,"results":"35","hashOfConfig":"25"},{"size":1373,"mtime":1674599295415,"results":"36","hashOfConfig":"25"},{"size":989,"mtime":1671470477628,"results":"37","hashOfConfig":"25"},{"size":200,"mtime":1671470477628,"results":"38","hashOfConfig":"25"},{"size":3321,"mtime":1674809837020,"results":"39","hashOfConfig":"25"},{"size":176,"mtime":1671470477628,"results":"40","hashOfConfig":"41"},{"size":104,"mtime":1674952918918,"results":"42","hashOfConfig":"41"},{"size":115,"mtime":1674940942214,"results":"43","hashOfConfig":"41"},{"size":446,"mtime":1674953007043,"results":"44","hashOfConfig":"41"},{"size":2516,"mtime":1674950192687,"results":"45","hashOfConfig":"41"},{"size":1260,"mtime":1674998871979,"results":"46","hashOfConfig":"41"},{"size":2516,"mtime":1674950192687,"results":"47","hashOfConfig":"41"},{"size":369,"mtime":1675004666846,"results":"48","hashOfConfig":"41"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"ejswvj",{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"51"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"51"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"1sos5a3",{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/muromac/uni/miroslavaLabs/src/main.ts",[],[],"/Users/muromac/uni/miroslavaLabs/src/App.vue",[],[],"/Users/muromac/uni/miroslavaLabs/src/router/index.ts",[],"/Users/muromac/uni/miroslavaLabs/src/store/index.ts",[],"/Users/muromac/uni/miroslavaLabs/src/views/labOne.vue",[],"/Users/muromac/uni/miroslavaLabs/src/views/labTwo.vue",[],"/Users/muromac/uni/miroslavaLabs/src/views/labThree.vue",["102","103","104","105","106"],"<template>\n  <div class=\"wrap\">\n    <div class=\"table\">\n      <div v-for=\"(_, index) in arr\" :key=\"index\">\n        <input\n          class=\"cell\"\n          type=\"number\"\n          name=\"number\"\n          :id=\"String(index)\"\n          v-model=\"arr1[index]\"\n        />\n      </div>\n    </div>\n    <div class=\"table\">\n      <div v-for=\"(_, index) in arrY\" :key=\"index\">\n        <input\n          type=\"number\"\n          name=\"number\"\n          :id=\"String(index)\"\n          v-model=\"arr2[index]\"\n          class=\"cell\"\n        />\n      </div>\n    </div>\n    Elements = {{ size }}\n    <div>Residual Term Lagrange = {{ maxL }}</div>\n    <div>Residual Term Newton = {{ maxN }}</div>\n    <div>[alpha,betta]: [{{ a }},{{ b }}]</div>\n    <div class=\"buttons\">\n      <button @click=\"LagrangeButtonClick\">Lagrange</button>\n      <button @click=\"NewtonButtonClick\">Newton</button>\n      <button @click=\"NewtonForwardButtonClick\">Newton Forward</button>\n      <button @click=\"NewtonBackButtonClick\">Newton Back</button>\n    </div>\n    <div v-if=\"render\">\n      <Line id=\"1\" :data=\"data\" :options=\"options\" />\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, Ref, ComputedRef } from \"@vue/reactivity\";\nimport { computed } from \"@vue/runtime-core\";\n\nimport { Line } from \"vue-chartjs\";\nimport {\n  Chart as ChartJS,\n  Title,\n  Tooltip,\n  Legend,\n  LineElement,\n  CategoryScale,\n  LinearScale,\n  LineController,\n  PointElement,\n} from \"chart.js\";\n\nChartJS.register(\n  Title,\n  Tooltip,\n  Legend,\n  LineElement,\n  CategoryScale,\n  LinearScale,\n  LineController,\n  PointElement\n);\n\nChartJS.register(\n  Title,\n  Tooltip,\n  Legend,\n  LineElement,\n  CategoryScale,\n  LinearScale,\n  LineController,\n  PointElement\n);\n\nconst createMatrix = (arr: Array<number>) => {\n  arr1.value = arr;\n};\nconst createMatrix2 = (arr: Array<number>) => {\n  arr2.value = arr;\n};\nlet size = ref(4);\nlet arr1: Ref<Array<number>> = ref([]);\nlet arr2: Ref<Array<number>> = ref([]);\nlet arr = computed(() => {\n  let arr = [];\n  for (let i = 0; i < size.value; i++) {\n    arr.push(arr1.value[i] ?? 0);\n  }\n  createMatrix(arr);\n  return arr;\n});\nlet arrY = computed(() => {\n  let iarr2 = [];\n  for (let i = 0; i < size.value; i++) {\n    iarr2.push(arr2.value[i] ?? 0);\n  }\n  createMatrix2(iarr2);\n  return iarr2;\n});\n\nconst labels = arr1.value;\nconst data = ref({\n  labels: labels,\n  datasets: [\n    {\n      label: \"\",\n      data: arr2.value,\n      borderColor: \"#a1d8e7\",\n      backgroundColor: \"red\",\n      fill: false,\n      tension: 0.5,\n    },\n  ],\n});\n\nconst options = ref({\n  responsive: true,\n  plugins: {\n    legend: {\n      position: \"\",\n    },\n  },\n});\n\nlet x = ref(0);\nlet sum = ref(0);\nlet n = ref(10);\nlet a = ref(1);\nlet b = ref(2);\nlet m = ref(10000);\nlet maxL = ref(0);\nlet maxN = ref(0);\nlet render = ref(false);\nlet h = computed((): number => (b.value - a.value) / n.value);\n\nlet sumEl = computed(() => {\n  return arr1.value.reduce(function (a, b) {\n    return Number(a) + Number(b);\n  });\n});\n\nlet sumEl2 = computed(() => {\n  return arr2.value.reduce(function (a, b) {\n    return Number(a) + Number(b);\n  });\n});\n\n// helpers\n\nconst factorialize = (num: number): number => {\n  if (num < 0) return -1;\n  else if (num == 0) return 1;\n  else {\n    return num * factorialize(num - 1);\n  }\n};\n\nlet arrCheshibov: ComputedRef<Array<number>> = computed(() => {\n  let arr: Array<number> = [];\n\n  for (let i = 0; i < n.value + 1; i++) {\n    arr.push(Cheshibov(i));\n  }\n\n  return arr;\n});\n\nlet f = (x: number) => {\n  return x ** 2 - x ** 3;\n};\n\nconst myRandomInts = (quantity: number, min: number, max: number) => {\n  let arr = [];\n  while (arr.length < quantity) {\n    var candidateInt = Math.random() * (max - min) + min;\n    if (arr.indexOf(candidateInt) === -1) arr.push(candidateInt);\n  }\n  return arr;\n};\n\n// buttons\n\nconst LagrangeButtonClick = () => {\n  let arrF1 = [];\n\n  let arrCheshibov: Array<number> = arrCheshibov.value;\n\n  for (let i = 0; i < n.value + 1; i++) {\n    arrF1.push(f(arrCheshibov[i]));\n  }\n\n  arr1.value = [...arrCheshibov];\n  arr2.value = [...arrF1];\n  size.value = n.value + 1;\n  let max = 0;\n\n  for (let i = 0; i < m.value; i++) {\n    let el = a.value + ((b.value - a.value) / m.value) * i;\n    let num1 = f(el);\n    let num2 = Lagrange(el);\n    let el2 = num1 - num2;\n    if (max < Math.abs(el2)) {\n      max = Math.abs(el2);\n    }\n  }\n\n  maxL.value = max;\n};\n\nconst NewtonButtonClick = () => {\n  let arrX = myRandomInts(n.value + 1, a.value, b.value);\n  arrX.sort((a, b) => a - b);\n\n  let arrY = arrX.map((el) => f(el));\n  arr1.value = [...arrX];\n  arr2.value = [...arrY];\n  size.value = n.value + 1;\n  let max = 0;\n\n  for (let i = 0; i < m.value; i++) {\n    let el = a.value + ((b.value - a.value) / m.value) * i;\n    let num1 = f(el);\n    let num2 = Newton(el);\n    let el2 = num1 - num2;\n    if (max < Math.abs(el2)) {\n      max = Math.abs(el2);\n    }\n  }\n\n  maxN.value = max;\n  render.value = true;\n};\n\nconst NewtonForwardButtonClick = () => {\n  let arrX = [];\n  for (let i = 0; i < n.value; i++) {\n    arrX.push(a.value + i * h.value);\n  }\n\n  let arrY = arrX.map((el) => f(el));\n  arr1.value = [...arrX];\n  arr2.value = [...arrY];\n  size.value = n.value;\n  let max = 0;\n\n  for (let i = 0; i < m.value; i++) {\n    let el = a.value + ((b.value - a.value) / m.value) * i;\n    let num1 = f(el);\n    let num2 = NewtonF(el);\n    let el2 = num1 - num2;\n    if (max < Math.abs(el2)) {\n      max = Math.abs(el2);\n    }\n  }\n  maxL.value = max;\n  render.value = true;\n};\n\nconst NewtonBackButtonClick = () => {\n  let arrX = [];\n  for (let i = 0; i < n.value; i++) {\n    arrX.push(a.value + i * h.value);\n  }\n\n  let arrY = arrX.map((el) => f(el));\n  arr1.value = [...arrX];\n  arr2.value = [...arrY];\n  size.value = n.value;\n  let max = 0;\n\n  for (let i = 0; i < m.value; i++) {\n    let el = a.value + ((b.value - a.value) / m.value) * i;\n    let num1 = f(el);\n    let num2 = NewtonB(el);\n    let el2 = num1 - num2;\n    if (max < Math.abs(el2)) {\n      max = Math.abs(el2);\n    }\n  }\n  maxL.value = max;\n  render.value = true;\n};\n\nconst NewtonF = (x: number) => {\n  let arrX = arr1.value;\n  let arrY = arr2.value;\n  let arrRes = [[...arrY]];\n  for (let i = 0; i < n.value - 1; i++) {\n    let arrT = [];\n    for (let j = 0; j < n.value - i - 1; j++) {\n      let el = arrRes[i][j + 1] - arrRes[i][j];\n      arrT.push(el);\n    }\n    arrRes.push(arrT);\n  }\n  let N = 0;\n  for (let i = 0; i < arrRes.length; i++) {\n    let m = arrRes[i][0];\n    for (let j = 0; j < i; j++) {\n      m *= x - arrX[j];\n    }\n    N += m / (factorialize(i) * h.value ** i);\n  }\n  return N;\n};\n\nconst NewtonB = (x: number) => {\n  let arrX = arr1.value;\n  let arrY = arr2.value;\n  let arrRes = [[...arrY]];\n  for (let i = 0; i < n.value - 1; i++) {\n    let arrT = [];\n    for (let j = 0; j < n.value - i - 1; j++) {\n      let el = arrRes[i][j + 1] - arrRes[i][j];\n      arrT.push(el);\n    }\n    arrRes.push(arrT);\n  }\n  let N = 0;\n  for (let i = 0; i < arrRes.length; i++) {\n    let m = arrRes[i][arrRes[i].length - 1];\n    for (let j = 0; j < i; j++) {\n      m *= x - arrX[arrRes.length - j - 1];\n    }\n    N += m / (factorialize(i) * h.value ** i);\n  }\n  return N;\n};\nconst Cheshibov = (i: number) => {\n  let el1 = (b.value + a.value) / 2;\n  let el2 =\n    ((b.value - a.value) / 2) *\n    Math.cos(((2 * i + 1) / (2 * (n.value + 1))) * Math.PI);\n  return el1 + el2;\n};\n\nconst Lagrange = (x: number) => {\n  let sum = 0;\n  let arrX = arr1.value;\n  let arrY = arr2.value;\n  for (let i = 0; i < size.value; i++) {\n    let arrX2 = [...arrX];\n    arrX2.splice(i, 1);\n    let a = 1;\n    let b = 1;\n    for (let j = 0; j < size.value - 1; j++) {\n      a *= x - arrX2[j];\n      b *= arrX[i] - arrX2[j];\n    }\n    sum += arrY[i] * (a / b);\n  }\n  return sum;\n};\n\nconst Newton = (x: number) => {\n  let arrX = arr1.value;\n  let arrY = arr2.value;\n  let arrRes = [[...arrY]];\n  for (let i = 0; i < n.value - 1; i++) {\n    let arrT = [];\n    for (let j = 0; j < n.value - i - 1; j++) {\n      let el = (arrRes[i][j + 1] - arrRes[i][j]) / (arrX[j + 1 + i] - arrX[j]);\n      arrT.push(el);\n    }\n    arrRes.push(arrT);\n  }\n  let N = 0;\n  for (let i = 0; i < arrRes.length; i++) {\n    let m = arrRes[i][0];\n    for (let j = 0; j < i; j++) {\n      m *= x - arrX[j];\n    }\n    N += m;\n  }\n  return N;\n};\n</script>\n<style lang=\"scss\" scoped>\nhtml {\n  display: flex;\n}\n.table {\n  display: flex;\n  flex-direction: row;\n  margin: 10px;\n}\n.buttons {\n  display: flex;\n  flex-direction: row;\n  button {\n    margin: 5px;\n    width: 100px;\n  }\n}\n</style>\n","/Users/muromac/uni/miroslavaLabs/src/views/labSix.vue",["107"],"/Users/muromac/uni/miroslavaLabs/src/views/labFour.vue",[],"/Users/muromac/uni/miroslavaLabs/src/functions/determinant.ts",[],"/Users/muromac/uni/miroslavaLabs/src/functions/gaus.ts",[],"/Users/muromac/uni/miroslavaLabs/src/functions/zeidel.ts",["108","109","110","111"],"export const method_zeidel = (matrix: any, vector: any, eps: any) => {\n  const res = [];\n  const xVector = new Array(matrix.length).fill(0);\n  const el: { [key: string]: any } = {};\n  let con = false;\n  let counter = 0;\n\n  while (!con) {\n    let xOld;\n    if (counter == 0) {\n      xOld = new Array(matrix.length).fill(0);\n    } else {\n      xOld = Object.assign([], xVector);\n    }\n\n    for (let i = 0; i < matrix.length; i++) {\n      const xNew = Object.assign({}, xVector);\n      xNew[i] = 100;\n      el[`s${i}`] = matrix[i].map((element: number) => element * -1);\n      el[`s${i}`][i] = vector[i];\n      el[`s${i}`] = el[`s${i}`].map(\n        (element: number) => element / matrix[i][i]\n      );\n      console.log(el);\n      el[`s${i}_sum`] = sum_array(\n        el[`s${i}`].map(\n          (element: number, index: number) => element * xNew[index]\n        )\n      );\n      el[`s${i}_sum`] = Math.abs(el[`s${i}_sum`]);\n      console.log(el, xVector);\n      xVector[i] = el[`s${i}_sum`].toFixed(4);\n    }\n    res.push(Object.assign([], xVector));\n    con = Math.abs(sum_array(xVector) - sum_array(xOld)) <= eps;\n    counter++;\n  }\n  const el1 = [`counter=${counter}`];\n  res.push([el1]);\n  return res;\n};\n\nexport const sum_array = (arr: Array<number>): number => {\n  let summ = 0;\n  for (let i = 0; i < arr.length; i++) {\n    summ += Number(arr[i]);\n  }\n  return summ;\n};\n","/Users/muromac/uni/miroslavaLabs/src/functions/jakobi.ts",["112","113","114","115","116","117","118"],"import { sum_array } from \"./zeidel\";\n\nexport function method_yacobi(matrix: any, vector: any, eps: any) {\n  let counter = 0;\n  const res = [];\n  let xVector = new Array(matrix.length).fill(0);\n  const el: { [key: string]: any } = {};\n  let converge = false;\n\n  while (!converge) {\n    const test = [];\n\n    for (let i = 0; i < matrix.length; i++) {\n      const xNew = Object.assign({}, xVector);\n      xNew[i] = 1;\n      el[`s${i}`] = matrix[i].map((element: any) => element * -1);\n      el[`s${i}`][i] = vector[i];\n      el[`s${i}`] = el[`s${i}`].map((element: any) => element / matrix[i][i]);\n      el[`s${i}_sum`] = sum_array(\n        el[`s${i}`].map((element: any, index: number) => element * xNew[index])\n      );\n      test[i] = el[`s${i}_sum`].toFixed(4);\n    }\n\n    converge = Math.abs(sum_array(xVector) - sum_array(test)) <= eps;\n    xVector = test;\n    res.push(xVector);\n    counter = counter + 1;\n  }\n\n  const lol = [`counter=${counter}`];\n  res.push([lol]);\n  return res;\n}\n","/Users/muromac/uni/miroslavaLabs/src/functions/inverse.ts",[],"/Users/muromac/uni/miroslavaLabs/src/views/labSeven.vue",[],"/Users/muromac/uni/testing/src/main.ts",[],[],"/Users/muromac/uni/testing/src/App.vue",[],"/Users/muromac/uni/testing/src/store/index.ts",[],"/Users/muromac/uni/testing/src/router/index.ts",[],"/Users/muromac/uni/testing/src/views/mainPage.vue",[],"/Users/muromac/uni/testing/src/views/GraphicPage.vue",[],"/Users/muromac/uni/testing/src/views/MainPage.vue",[],[],"/Users/muromac/uni/testing/src/funcs/ExectSolutionToEqasion.ts",[],{"ruleId":"119","severity":1,"message":"120","line":130,"column":5,"nodeType":"121","messageId":"122","endLine":130,"endColumn":6},{"ruleId":"119","severity":1,"message":"123","line":131,"column":5,"nodeType":"121","messageId":"122","endLine":131,"endColumn":8},{"ruleId":"119","severity":1,"message":"124","line":141,"column":5,"nodeType":"121","messageId":"122","endLine":141,"endColumn":10},{"ruleId":"119","severity":1,"message":"125","line":147,"column":5,"nodeType":"121","messageId":"122","endLine":147,"endColumn":11},{"ruleId":"119","severity":1,"message":"126","line":163,"column":5,"nodeType":"121","messageId":"122","endLine":163,"endColumn":45},{"ruleId":"119","severity":1,"message":"127","line":237,"column":7,"nodeType":"121","messageId":"122","endLine":237,"endColumn":20},{"ruleId":"128","severity":1,"message":"129","line":1,"column":39,"nodeType":"130","messageId":"131","endLine":1,"endColumn":42,"suggestions":"132"},{"ruleId":"128","severity":1,"message":"129","line":1,"column":52,"nodeType":"130","messageId":"131","endLine":1,"endColumn":55,"suggestions":"133"},{"ruleId":"128","severity":1,"message":"129","line":1,"column":62,"nodeType":"130","messageId":"131","endLine":1,"endColumn":65,"suggestions":"134"},{"ruleId":"128","severity":1,"message":"129","line":4,"column":30,"nodeType":"130","messageId":"131","endLine":4,"endColumn":33,"suggestions":"135"},{"ruleId":"128","severity":1,"message":"129","line":3,"column":39,"nodeType":"130","messageId":"131","endLine":3,"endColumn":42,"suggestions":"136"},{"ruleId":"128","severity":1,"message":"129","line":3,"column":52,"nodeType":"130","messageId":"131","endLine":3,"endColumn":55,"suggestions":"137"},{"ruleId":"128","severity":1,"message":"129","line":3,"column":62,"nodeType":"130","messageId":"131","endLine":3,"endColumn":65,"suggestions":"138"},{"ruleId":"128","severity":1,"message":"129","line":7,"column":30,"nodeType":"130","messageId":"131","endLine":7,"endColumn":33,"suggestions":"139"},{"ruleId":"128","severity":1,"message":"129","line":16,"column":45,"nodeType":"130","messageId":"131","endLine":16,"endColumn":48,"suggestions":"140"},{"ruleId":"128","severity":1,"message":"129","line":18,"column":47,"nodeType":"130","messageId":"131","endLine":18,"endColumn":50,"suggestions":"141"},{"ruleId":"128","severity":1,"message":"129","line":20,"column":35,"nodeType":"130","messageId":"131","endLine":20,"endColumn":38,"suggestions":"142"},"@typescript-eslint/no-unused-vars","'x' is assigned a value but never used.","Identifier","unusedVar","'sum' is assigned a value but never used.","'sumEl' is assigned a value but never used.","'sumEl2' is assigned a value but never used.","'arrCheshibov' is assigned a value but never used.","'rungeKutaFunc' is assigned a value but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["143","144"],["145","146"],["147","148"],["149","150"],["151","152"],["153","154"],["155","156"],["157","158"],["159","160"],["161","162"],["163","164"],{"messageId":"165","fix":"166","desc":"167"},{"messageId":"168","fix":"169","desc":"170"},{"messageId":"165","fix":"171","desc":"167"},{"messageId":"168","fix":"172","desc":"170"},{"messageId":"165","fix":"173","desc":"167"},{"messageId":"168","fix":"174","desc":"170"},{"messageId":"165","fix":"175","desc":"167"},{"messageId":"168","fix":"176","desc":"170"},{"messageId":"165","fix":"177","desc":"167"},{"messageId":"168","fix":"178","desc":"170"},{"messageId":"165","fix":"179","desc":"167"},{"messageId":"168","fix":"180","desc":"170"},{"messageId":"165","fix":"181","desc":"167"},{"messageId":"168","fix":"182","desc":"170"},{"messageId":"165","fix":"183","desc":"167"},{"messageId":"168","fix":"184","desc":"170"},{"messageId":"165","fix":"185","desc":"167"},{"messageId":"168","fix":"186","desc":"170"},{"messageId":"165","fix":"187","desc":"167"},{"messageId":"168","fix":"188","desc":"170"},{"messageId":"165","fix":"189","desc":"167"},{"messageId":"168","fix":"190","desc":"170"},"suggestUnknown",{"range":"191","text":"192"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"191","text":"193"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"194","text":"192"},{"range":"194","text":"193"},{"range":"195","text":"192"},{"range":"195","text":"193"},{"range":"196","text":"192"},{"range":"196","text":"193"},{"range":"197","text":"192"},{"range":"197","text":"193"},{"range":"198","text":"192"},{"range":"198","text":"193"},{"range":"199","text":"192"},{"range":"199","text":"193"},{"range":"200","text":"192"},{"range":"200","text":"193"},{"range":"201","text":"192"},{"range":"201","text":"193"},{"range":"202","text":"192"},{"range":"202","text":"193"},{"range":"203","text":"192"},{"range":"203","text":"193"},[38,41],"unknown","never",[51,54],[61,64],[170,173],[77,80],[90,93],[100,103],[223,226],[460,463],[563,566],[665,668]]