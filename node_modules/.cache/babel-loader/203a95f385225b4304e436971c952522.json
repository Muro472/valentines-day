{"ast":null,"code":"import \"core-js/modules/es.array.at.js\";\nimport \"core-js/modules/es.string.at-alternative.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nvar z = Object.defineProperty;\n\nvar f = (m, t, s) => t in m ? z(m, t, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: s\n}) : m[t] = s;\n\nvar v = (m, t, s) => (f(m, typeof t != \"symbol\" ? t + \"\" : t, s), s);\n\nclass c {\n  constructor(t, s, e) {\n    v(this, \"_rows\");\n    v(this, \"_columns\");\n    v(this, \"_values\");\n    this._rows = Math.max(t, 1), this._columns = Math.max(s, 1), this._values = new Array(this._rows).fill([]).map(() => new Array(this._columns).fill(0)), e && (this.values = e);\n  }\n\n  get rows() {\n    return this._rows;\n  }\n\n  get columns() {\n    return this._columns;\n  }\n\n  get values() {\n    return this._values;\n  }\n\n  set values(t) {\n    const s = Math.min(t.length, this.rows),\n          e = Math.min(t[0].length, this.columns);\n\n    for (let r = 0; r < s; r++) for (let i = 0; i < e; i++) this.values[r][i] = t[r][i];\n  }\n\n  at(t, s) {\n    return this.values[t][s];\n  }\n\n  reset() {\n    this.values = this.values.map(t => t.map(() => 0));\n  }\n\n  addAColumn() {\n    return new c(this.rows, this.columns + 1, this.values);\n  }\n\n  addARow() {\n    return new c(this.rows + 1, this.columns, this.values);\n  }\n\n  equals(t) {\n    return this.rows === t.rows && this.columns === t.columns && this.values.reduce((s, e, r) => s && e.reduce((i, n, h) => i && t.at(r, h) === n, s), !0);\n  }\n\n  setAsIdentity() {\n    if (this.rows !== this.columns) throw new Error(\"Dimension error! The matrix isn't squared!\");\n    return this.values.forEach((t, s) => {\n      t.forEach((e, r) => {\n        this.values[s][r] = s === r ? 1 : 0;\n      });\n    }), this;\n  }\n\n  static identity(t) {\n    if (t < 1) throw Error(\"Dimension error! Matrix dimension must be positive.\");\n    return new c(t, t).setAsIdentity();\n  }\n\n  multiply(t) {\n    if (this.columns !== t.rows) throw new Error(\"Dimension error! The operand matrix must have the same number of rows as 'this' matrix columns!\");\n    const s = new c(this.rows, t.columns);\n    return s.values = s.values.map((e, r) => e.map((i, n) => this.values[r].reduce((h, a, o) => h + a * t.at(o, n), 0))), s;\n  }\n\n  determinant() {\n    if (this.rows !== this.columns) throw new Error(\"Dimension error! The matrix isn't squared!\");\n    if (this.rows === this.columns && this.columns === 1) return this.values[0][0];\n    let t = 0,\n        s = 1;\n    if (this.rows === 2) t = this.values[0][0] * this.values[1][1] - this.values[1][0] * this.values[0][1];else for (let e = 0; e < this.rows; e++) {\n      const r = this.getCofactor(0, e);\n      t += s * this.at(0, e) * r.determinant(), s = -s;\n    }\n    return t;\n  }\n\n  getCofactor(t, s) {\n    return new c(this.rows - 1, this.columns - 1, this.values.filter((e, r) => r !== t).map(e => e.filter((r, i) => i !== s)));\n  }\n\n  transpose() {\n    return new c(this.columns, this.rows, new Array(this.columns).fill([]).map((t, s) => new Array(this.rows).fill(0).map((e, r) => this.at(r, s))));\n  }\n\n  inverse() {\n    if (this.rows !== this.columns) throw new Error(\"Dimension error! The matrix isn't squared!\");\n    const t = this.determinant();\n    if (t === 0) throw new Error(\"Determinant is 0, can't compute inverse.\");\n    const e = new c(this.rows, this.columns, this.values.map((r, i) => r.map((n, h) => Math.pow(-1, i + h) * this.getCofactor(i, h).determinant()))).transpose();\n    return new c(this.rows, this.columns, this.values.map((r, i) => r.map((n, h) => e.at(i, h) / t)));\n  }\n\n}\n\nclass y {\n  constructor(t) {\n    v(this, \"_values\");\n    this._values = new Array((t || [0]).length).fill(0), t && (this.values = t);\n  }\n\n  get rows() {\n    return this.values.length;\n  }\n\n  get values() {\n    return this._values;\n  }\n\n  set values(t) {\n    const s = Math.min(this.values.length, t.length);\n\n    for (let e = 0; e < s; e++) this.values[e] = t[e];\n  }\n\n  at(t) {\n    return this.values[t];\n  }\n\n  reset() {\n    this.values = this.values.fill(0);\n  }\n\n  addAValue() {\n    return this.values.push(0), new y(this.values);\n  }\n\n  equals(t) {\n    return this.rows === t.rows && this.values.reduce((s, e, r) => s && t.at(r) === e, !0);\n  }\n\n  negate() {\n    return new y(this.values.map(t => -t));\n  }\n\n  length() {\n    return Math.sqrt(this.squaredLength());\n  }\n\n  squaredLength() {\n    return this.dot(this);\n  }\n\n  add(t) {\n    if (this.rows !== t.rows) throw new Error(\"Vectors don't have the same dimension!\");\n    return this.operateOnAllValues((s, e) => s + t.at(e));\n  }\n\n  substract(t) {\n    if (this.rows !== t.rows) throw new Error(\"Vectors don't have the same dimension!\");\n    return this.operateOnAllValues((s, e) => s - t.at(e));\n  }\n\n  multiply(t) {\n    if (this.rows !== t.rows) throw new Error(\"Vectors don't have the same dimension!\");\n    return this.operateOnAllValues((s, e) => s * t.at(e));\n  }\n\n  divide(t) {\n    if (this.rows !== t.rows) throw new Error(\"Vectors don't have the same dimension!\");\n    return this.operateOnAllValues((s, e) => t.at(e) === 0 ? s : s / t.at(e));\n  }\n\n  scale(t) {\n    return this.operateOnAllValues(s => s * t);\n  }\n\n  operateOnAllValues(t) {\n    return new y(this.values.map(t));\n  }\n\n  normalize() {\n    const t = this.length();\n    return this.operateOnAllValues(s => s / t);\n  }\n\n  dot(t) {\n    return this.values.reduce((s, e, r) => s + e * t.at(r), 0);\n  }\n\n  cross(t) {\n    if (this.rows < 3 || t.rows < 3) throw new Error(\"Cross product is possible on 3D vectors only\");\n    const s = new Array(3);\n    return s[0] = this.at(1) * t.at(2) - this.at(2) * t.at(1), s[1] = this.at(2) * t.at(0) - this.at(0) * t.at(2), s[2] = this.at(0) * t.at(1) - this.at(1) * t.at(0), new y(s);\n  }\n\n  mix(t, s) {\n    return new y(this.values.map((e, r) => e + s * (t.at(r) - e)));\n  }\n\n  static get360angle(t, s) {\n    if (t.rows !== 3 || s.rows !== 3) throw new Error(\"Vectors must be in 3D!. You can add a 1 dimension if it is missing.\");\n    return -Math.atan2(s.cross(t).dot(new y([0, 0, 1]).normalize()), t.dot(s));\n  }\n\n}\n\nconst d = 1e-5,\n      w = class {\n  constructor(t) {\n    v(this, \"values\", new Float32Array(4));\n    t !== void 0 && (this.xyzw = t);\n  }\n\n  get x() {\n    return this.values[0];\n  }\n\n  set x(t) {\n    this.values[0] = t;\n  }\n\n  get y() {\n    return this.values[1];\n  }\n\n  set y(t) {\n    this.values[1] = t;\n  }\n\n  get z() {\n    return this.values[2];\n  }\n\n  set z(t) {\n    this.values[2] = t;\n  }\n\n  get w() {\n    return this.values[3];\n  }\n\n  set w(t) {\n    this.values[3] = t;\n  }\n\n  get xy() {\n    return [this.values[0], this.values[1]];\n  }\n\n  set xy(t) {\n    this.values[0] = t[0], this.values[1] = t[1];\n  }\n\n  get xyz() {\n    return [this.values[0], this.values[1], this.values[2]];\n  }\n\n  set xyz(t) {\n    this.values[0] = t[0], this.values[1] = t[1], this.values[2] = t[2];\n  }\n\n  get xyzw() {\n    return [this.values[0], this.values[1], this.values[2], this.values[3]];\n  }\n\n  set xyzw(t) {\n    this.values[0] = t[0], this.values[1] = t[1], this.values[2] = t[2], this.values[3] = t[3];\n  }\n\n  at(t) {\n    return this.values[t];\n  }\n\n  reset() {\n    for (let t = 0; t < 4; t++) this.values[t] = 0;\n  }\n\n  copy(t) {\n    t || (t = new w());\n\n    for (let s = 0; s < 4; s++) t.values[s] = this.values[s];\n\n    return t;\n  }\n\n  roll() {\n    const t = this.x,\n          s = this.y,\n          e = this.z,\n          r = this.w;\n    return Math.atan2(2 * (t * s + r * e), r * r + t * t - s * s - e * e);\n  }\n\n  pitch() {\n    const t = this.x,\n          s = this.y,\n          e = this.z,\n          r = this.w;\n    return Math.atan2(2 * (s * e + r * t), r * r - t * t - s * s + e * e);\n  }\n\n  yaw() {\n    return Math.asin(2 * (this.x * this.z - this.w * this.y));\n  }\n\n  equals(t, s = d) {\n    for (let e = 0; e < 4; e++) if (Math.abs(this.values[e] - t.at(e)) > s) return !1;\n\n    return !0;\n  }\n\n  setIdentity() {\n    return this.x = 0, this.y = 0, this.z = 0, this.w = 1, this;\n  }\n\n  calculateW() {\n    const t = this.x,\n          s = this.y,\n          e = this.z;\n    return this.w = -Math.sqrt(Math.abs(1 - t * t - s * s - e * e)), this;\n  }\n\n  inverse() {\n    const t = w.dot(this, this);\n    if (!t) return this.xyzw = [0, 0, 0, 0], this;\n    const s = t ? 1 / t : 0;\n    return this.x *= -s, this.y *= -s, this.z *= -s, this.w *= s, this;\n  }\n\n  conjugate() {\n    return this.values[0] *= -1, this.values[1] *= -1, this.values[2] *= -1, this;\n  }\n\n  length() {\n    const t = this.x,\n          s = this.y,\n          e = this.z,\n          r = this.w;\n    return Math.sqrt(t * t + s * s + e * e + r * r);\n  }\n\n  normalize(t) {\n    t || (t = this);\n    const s = this.x,\n          e = this.y,\n          r = this.z,\n          i = this.w;\n    let n = Math.sqrt(s * s + e * e + r * r + i * i);\n    return n ? (n = 1 / n, t.x = s * n, t.y = e * n, t.z = r * n, t.w = i * n, t) : (t.x = 0, t.y = 0, t.z = 0, t.w = 0, t);\n  }\n\n  add(t) {\n    for (let s = 0; s < 4; s++) this.values[s] += t.at(s);\n\n    return this;\n  }\n\n  multiply(t) {\n    const s = this.values[0],\n          e = this.values[1],\n          r = this.values[2],\n          i = this.values[3],\n          n = t.x,\n          h = t.y,\n          a = t.z,\n          o = t.w;\n    return this.x = s * o + i * n + e * a - r * h, this.y = e * o + i * h + r * n - s * a, this.z = r * o + i * a + s * h - e * n, this.w = i * o - s * n - e * h - r * a, this;\n  }\n\n  static dot(t, s) {\n    return t.x * s.x + t.y * s.y + t.z * s.z + t.w * s.w;\n  }\n\n  static sum(t, s) {\n    const e = new w();\n    return e.x = t.x + s.x, e.y = t.y + s.y, e.z = t.z + s.z, e.w = t.w + s.w, e;\n  }\n\n  static product(t, s) {\n    const e = new w(),\n          r = t.x,\n          i = t.y,\n          n = t.z,\n          h = t.w,\n          a = s.x,\n          o = s.y,\n          u = s.z,\n          l = s.w;\n    return e.x = r * l + h * a + i * u - n * o, e.y = i * l + h * o + n * a - r * u, e.z = n * l + h * u + r * o - i * a, e.w = h * l - r * a - i * o - n * u, e;\n  }\n\n  static cross(t, s) {\n    const e = new w(),\n          r = t.x,\n          i = t.y,\n          n = t.z,\n          h = t.w,\n          a = s.x,\n          o = s.y,\n          u = s.z,\n          l = s.w;\n    return e.x = h * u + n * l + r * o - i * a, e.y = h * l - r * a - i * o - n * u, e.z = h * a + r * l + i * u - n * o, e.w = h * o + i * l + n * a - r * u, e;\n  }\n\n  static shortMix(t, s, e) {\n    const r = new w();\n    if (e <= 0) return r.xyzw = t.xyzw, r;\n    if (e >= 1) return r.xyzw = s.xyzw, r;\n    let i = w.dot(t, s);\n    const n = s.copy();\n    i < 0 && (n.inverse(), i = -i);\n    let h, a;\n    if (i > 0.9999) h = 1 - e, a = 0 + e;else {\n      const o = Math.sqrt(1 - i * i),\n            u = Math.atan2(o, i),\n            l = 1 / o;\n      h = Math.sin((1 - e) * u) * l, a = Math.sin((0 + e) * u) * l;\n    }\n    return r.x = h * t.x + a * n.x, r.y = h * t.y + a * n.y, r.z = h * t.z + a * n.z, r.w = h * t.w + a * n.w, r;\n  }\n\n  static mix(t, s, e) {\n    const r = new w(),\n          i = t.x * s.x + t.y * s.y + t.z * s.z + t.w * s.w;\n    if (Math.abs(i) >= 1) return r.xyzw = t.xyzw, r;\n    const n = Math.acos(i),\n          h = Math.sqrt(1 - i * i);\n    if (Math.abs(h) < 1e-3) return r.x = t.x * 0.5 + s.x * 0.5, r.y = t.y * 0.5 + s.y * 0.5, r.z = t.z * 0.5 + s.z * 0.5, r.w = t.w * 0.5 + s.w * 0.5, r;\n    const a = Math.sin((1 - e) * n) / h,\n          o = Math.sin(e * n) / h;\n    return r.x = t.x * a + s.x * o, r.y = t.y * a + s.y * o, r.z = t.z * a + s.z * o, r.w = t.w * a + s.w * o, r;\n  }\n\n  static fromAxisAngle(t, s) {\n    if (t.rows !== 3) throw new Error(\"The axis vector must be in 3D!\");\n    const e = new w();\n    s *= 0.5;\n    const r = Math.sin(s);\n    return e.x = t.at(0) * r, e.y = t.at(1) * r, e.z = t.at(2) * r, e.w = Math.cos(s), e;\n  }\n\n};\nlet x = w;\nv(x, \"identity\", new w().setIdentity());\nexport { c as Matrix, x as Quat, y as Vector };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,MAAqBA,CAArB,CAA4B;EASxBC,YAAYC,CAAZ,EAA0BC,CAA1B,EAA2CC,CAA3C,EAAgE;IANxDC;IAEAA;IAEAA;IAGJ,KAAKC,KAAL,GAAaC,KAAKC,GAAL,CAASN,CAAT,EAAe,CAAf,CAAb,EACA,KAAKO,QAAL,GAAgBF,KAAKC,GAAL,CAASL,CAAT,EAAkB,CAAlB,CADhB,EAGA,KAAKO,OAAL,GAAe,IAAIC,KAAJ,CAAoB,KAAKL,KAAzB,EAAgCM,IAAhC,CAAqC,EAArC,EAAyCC,GAAzC,CAA6C,MAAM,IAAIF,KAAJ,CAAkB,KAAKF,QAAvB,EAAiCG,IAAjC,CAAsC,CAAtC,CAAnD,CAHf,EAKIR,MACA,KAAKA,MAAL,GAAcA,CADdA,CALJ;EAQJ;;EAEI,WAAO;IACP,OAAO,KAAKE,KAAZ;EACJ;;EACI,cAAU;IACV,OAAO,KAAKG,QAAZ;EACJ;;EACI,aAAS;IACT,OAAO,KAAKC,OAAZ;EACJ;;EAQI,WAAOI,CAAP,EAA8B;IAC9B,MAAMC,IAASR,KAAKS,GAAL,CAASF,EAAUG,MAAnB,EAA2B,KAAKf,IAAhC,CAAf;IAAA,MACMgB,IAASX,KAAKS,GAAL,CAASF,EAAU,CAAVA,EAAaG,MAAtB,EAA8B,KAAKd,OAAnC,CADf;;IAEA,SAASgB,IAAI,CAAb,EAAgBA,IAAIJ,CAApB,EAA4BI,GAA5B,EACI,SAASC,IAAI,CAAb,EAAgBA,IAAIF,CAApB,EAA4BE,GAA5B,EACI,KAAKhB,MAAL,CAAYe,CAAZ,EAAeC,CAAf,IAAoBN,EAAUK,CAAVL,EAAaM,CAAbN,CAApB;EAGZ;;EAOAO,GAAGC,CAAH,EAAgBC,CAAhB,EAAqC;IAC1B,YAAKnB,MAAL,CAAYkB,CAAZ,EAAiBC,CAAjB;EACX;;EAKAC,QAAc;IACL,cAAS,KAAKpB,MAAL,CAAYS,GAAZ,CAAiBS,CAAD,IAASA,EAAIT,GAAJS,CAAQ,MAAM,CAAdA,CAAzB,CAAT;EACT;;EAKAG,aAAqB;IACV,WAAIzB,CAAJ,CAAW,KAAKE,IAAhB,EAAsB,KAAKC,OAAL,GAAe,CAArC,EAAwC,KAAKC,MAA7C;EACX;;EAKAsB,UAAkB;IACP,WAAI1B,CAAJ,CAAW,KAAKE,IAAL,GAAY,CAAvB,EAA0B,KAAKC,OAA/B,EAAwC,KAAKC,MAA7C;EACX;;EAMAuB,OAAOC,CAAP,EAA6B;IAEjB,YAAK1B,IAAL,KAAc0B,EAAI1B,IAAlB,IAA0B,KAAKC,OAAL,KAAiByB,EAAIzB,OAA/C,IACD,KAAKC,MAAL,CAAYyB,MAAZ,CACC,CAACC,CAAD,EAAeR,CAAf,EAAoBS,CAApB,KAA0BD,KAAOR,EAAIO,MAAJP,CACzB,CAACU,CAAD,EAAgBC,CAAhB,EAAqBC,CAArB,KAA2BF,KAAQJ,EAAIP,EAAJO,CAAOG,CAAPH,EAAUM,CAAVN,MAAiBK,CAD3BX,EACgCQ,CADhCR,CADlC,EAGG,EAHH,CADC;EAKZ;;EAKAa,gBAAgB;IACR,SAAKjC,IAAL,KAAc,KAAKC,OAAnB,EAAkC,UAAIiC,KAAJ,CAAU,4CAAV;IACtC,YAAKhC,MAAL,CAAYiC,OAAZ,CAAoB,CAACf,CAAD,EAAMS,CAAN,KAAY;MACxBT,UAAQ,CAACF,CAAD,EAAIc,CAAJ,KAAU;QAClB,KAAK9B,MAAL,CAAY2B,CAAZ,EAAeG,CAAf,IAAoBH,MAAMG,CAANH,GAAU,CAAVA,GAAc,CAAlC;MACH,CAFGT;IAGP,CAJD,GAKO,IALP;EAMJ;;EAMO,gBAASgB,CAAT,EAAoC;IACvC,IAAIA,IAAY,CAAhB,EAAmB,MAAMF,MAAM,qDAAN,CAAN;IACnB,OAAO,IAAIpC,CAAJ,CAAWsC,CAAX,EAAsBA,CAAtB,EAAiCH,aAAjC,EAAP;EACJ;;EAQAI,SAASX,CAAT,EAA8B;IACtB,SAAKzB,OAAL,KAAiByB,EAAI1B,IAArB,EAAiC,UAAIkC,KAAJ,CAAU,iGAAV;IACrC,MAAMI,IAAY,IAAIxC,CAAJ,CAAW,KAAKE,IAAhB,EAAsB0B,EAAIzB,OAA1B,CAAlB;IACA,SAAUC,MAAVoC,GAAmBA,EAAUpC,MAAVoC,CAAiB3B,GAAjB2B,CAAqB,CAAClB,CAAD,EAAMS,CAAN,KAC7BT,EAAIT,GAAJS,CAAQ,CAACW,CAAD,EAAMC,CAAN,KACJ,KAAK9B,MAAL,CAAY2B,CAAZ,EAAeF,MAAf,CAAsB,CAACY,CAAD,EAAMC,CAAN,EAAWC,CAAX,KAAiBF,IAAOC,IAAMd,EAAIP,EAAJO,CAAOe,CAAPf,EAAUM,CAAVN,CAApD,EAAmE,CAAnE,CADJN,CADQkB,CAAnBA,EAKOA,CALP;EAMJ;;EAMAI,cAAsB;IACd,SAAK1C,IAAL,KAAc,KAAKC,OAAnB,EAAkC,UAAIiC,KAAJ,CAAU,4CAAV;IACtC,IAAI,KAAKlC,IAAL,KAAc,KAAKC,OAAnB,IAA8B,KAAKA,OAAL,KAAiB,CAAnD,EAA+D,YAAKC,MAAL,CAAY,CAAZ,EAAe,CAAf;IAE/D,IAAIyC,IAAM,CAAV;IAAA,IACIC,IAAO,CADX;IAEI,SAAK5C,IAAL,KAAc,CAAd,EACA2C,IAAM,KAAKzC,MAAL,CAAY,CAAZ,EAAe,CAAf,IAAoB,KAAKA,MAAL,CAAY,CAAZ,EAAe,CAAf,CAApB,GAAwC,KAAKA,MAAL,CAAY,CAAZ,EAAe,CAAf,IAAoB,KAAKA,MAAL,CAAY,CAAZ,EAAe,CAAf,CAAlEyC,CADA,KAGA,SAASd,IAAI,CAAb,EAAgBA,IAAI,KAAK7B,IAAzB,EAA+B6B,GAA/B,EAAoC;MAChC,MAAMgB,IAAQ,KAAKC,WAAL,CAAiB,CAAjB,EAAoBjB,CAApB,CAAd;MACAc,KAAOC,IAAO,KAAKzB,EAAL,CAAQ,CAAR,EAAWU,CAAX,CAAPe,GAAuBC,EAAMH,WAANG,EAA9BF,EACAC,IAAO,CAACA,CADRD;IAEJ;IAEG;EACX;;EAQAG,YAAY1B,CAAZ,EAAyBC,CAAzB,EAA8C;IAC1C,OAAO,IAAIvB,CAAJ,CAAW,KAAKE,IAAL,GAAY,CAAvB,EAA0B,KAAKC,OAAL,GAAe,CAAzC,EAA4C,KAAKC,MAAL,CAC9C6C,MAD8C,CACvC,CAACC,CAAD,EAAInB,CAAJ,KAAUA,MAAMT,CADuB,EAE9CT,GAF8C,CAEzCO,CAAD,IAAOA,EAAE6B,MAAF7B,CAAS,CAAC8B,CAAD,EAAInB,CAAJ,KAAUA,MAAMR,CAAzBH,CAFmC,CAA5C,CAAP;EAGJ;;EAMA+B,YAAoB;IAChB,OAAO,IAAInD,CAAJ,CAAW,KAAKG,OAAhB,EAAyB,KAAKD,IAA9B,EAAoC,IAAIS,KAAJ,CAAoB,KAAKR,OAAzB,EAAkCS,IAAlC,CAAuC,EAAvC,EACtCC,GADsC,CAClC,CAACS,CAAD,EAAMS,CAAN,KAAY,IAAIpB,KAAJ,CAAkB,KAAKT,IAAvB,EAA6BU,IAA7B,CAAkC,CAAlC,EAAqCC,GAArC,CAAyC,CAACO,CAAD,EAAIc,CAAJ,KAAU,KAAKb,EAAL,CAAQa,CAAR,EAAWH,CAAX,CAAnD,CADsB,CAApC,CAAP;EAEJ;;EAMAqB,UAAU;IACF,SAAKlD,IAAL,KAAc,KAAKC,OAAnB,EAAkC,UAAIiC,KAAJ,CAAU,4CAAV;IAChC,UAAM,KAAKQ,WAAL,EAAN;IACN,IAAIC,MAAQ,CAAZ,EAAqB,UAAIT,KAAJ,CAAU,0CAAV;IASf,UANiB,IAAIpC,CAAJ,CAAY,KAAKE,IAAjB,EAAuB,KAAKC,OAA5B,EACnB,KAAKC,MAAL,CAAYS,GAAZ,CAAgB,CAACS,CAAD,EAAMS,CAAN,KAAYT,EAAIT,GAAJS,CAAQ,CAACW,CAAD,EAAMC,CAAN,KACnB3B,KAAK8C,GAAL,CAAS,EAAT,EAAatB,IAAIG,CAAjB,IACC,KAAKc,WAAL,CAAiBjB,CAAjB,EAAoBG,CAApB,EAAuBU,WAAvB,EAFUtB,CAA5B,CADmB,EAMmB6B,SANnB,EAMjB;IAEN,OAAO,IAAInD,CAAJ,CAAW,KAAKE,IAAhB,EAAsB,KAAKC,OAA3B,EACH,KAAKC,MAAL,CAAYS,GAAZ,CAAgB,CAACS,CAAD,EAAMS,CAAN,KAAYT,EAAIT,GAAJS,CAAQ,CAACW,CAAD,EAAMC,CAAN,KAAYoB,EAAmBjC,EAAnBiC,CAAsBvB,CAAtBuB,EAAyBpB,CAAzBoB,IAA8BT,CAAlDvB,CAA5B,CADG,CAAP;EAEJ;;AA/LwB;;ACA5B,MAAqBiC,CAArB,CAA4B;EAKxBtD,YAAYG,CAAZ,EAA+B;IAFvBC;IAIC,eAAU,IAAIM,KAAJ,CAAI,CAAeP,KAAU,CAAC,CAAD,CAAzB,EAA8Ba,MAAlC,EAA0CL,IAA1C,CAA+C,CAA/C,CAAV,EAEDR,MACA,KAAKA,MAAL,GAAcA,CADdA,CAFC;EAKT;;EAEI,WAAO;IACP,OAAO,KAAKA,MAAL,CAAYa,MAAnB;EACJ;;EAEI,aAAS;IACT,OAAO,KAAKP,OAAZ;EACJ;;EAQI,WAAOI,CAAP,EAA4B;IAC5B,MAAM0C,IAAUjD,KAAKS,GAAL,CAAS,KAAKZ,MAAL,CAAYa,MAArB,EAA6BH,EAAUG,MAAvC,CAAhB;;IACA,SAASc,IAAI,CAAb,EAAgBA,IAAIyB,CAApB,EAA6BzB,GAA7B,EACS,YAAOA,CAAP,IAAYjB,EAAUiB,CAAVjB,CAAZ;EAEb;;EAMAO,GAAGC,CAAH,EAAwB;IACpB,OAAO,KAAKlB,MAAL,CAAYkB,CAAZ,CAAP;EACJ;;EAKAE,QAAc;IACV,KAAKpB,MAAL,GAAc,KAAKA,MAAL,CAAYQ,IAAZ,CAAiB,CAAjB,CAAd;EACJ;;EAKA6C,YAAoB;IACX,mBAAOC,IAAP,CAAY,CAAZ,GACE,IAAIH,CAAJ,CAAW,KAAKnD,MAAhB,CADF;EAET;;EAMAuB,OAAOgC,CAAP,EAA6B;IACzB,OAAQ,KAAKzD,IAAL,KAAcyD,EAAIzD,IAAlB,IACD,KAAKE,MAAL,CAAYyB,MAAZ,CAAmB,CAACC,CAAD,EAAeG,CAAf,EAAoBF,CAApB,KAA0BD,KAAO6B,EAAItC,EAAJsC,CAAO5B,CAAP4B,MAAc1B,CAAlE,EAAuE,EAAvE,CADP;EAEJ;;EAMA2B,SAAiB;IACN,WAAIL,CAAJ,CAAW,KAAKnD,MAAL,CAAYS,GAAZ,CAAiBoB,CAAD,IAAS,CAACA,CAA1B,CAAX;EACX;;EAGAhB,SAAiB;IACb,OAAOV,KAAKsD,IAAL,CAAU,KAAKC,aAAL,EAAV,CAAP;EACJ;;EAGAA,gBAAwB;IACb,YAAKC,GAAL,CAAS,IAAT;EACX;;EAQAC,IAAIC,CAAJ,EAA4B;IACpB,SAAK/D,IAAL,KAAc+D,EAAO/D,IAArB,EAAiC,UAAIkC,KAAJ,CAAU,wCAAV;IAC9B,YAAK8B,kBAAL,CAAwB,CAACjC,CAAD,EAAMF,CAAN,KAAaE,IAAMgC,EAAO5C,EAAP4C,CAAUlC,CAAVkC,CAA3C;EACX;;EAQAE,UAAUF,CAAV,EAAkC;IAC1B,SAAK/D,IAAL,KAAc+D,EAAO/D,IAArB,EAAiC,UAAIkC,KAAJ,CAAU,wCAAV;IAC9B,YAAK8B,kBAAL,CAAwB,CAACjC,CAAD,EAAMF,CAAN,KAAaE,IAAMgC,EAAO5C,EAAP4C,CAAUlC,CAAVkC,CAA3C;EACX;;EAQA1B,SAAS0B,CAAT,EAAiC;IACzB,SAAK/D,IAAL,KAAc+D,EAAO/D,IAArB,EAAiC,UAAIkC,KAAJ,CAAU,wCAAV;IAC9B,YAAK8B,kBAAL,CAAwB,CAACjC,CAAD,EAAMF,CAAN,KAAaE,IAAMgC,EAAO5C,EAAP4C,CAAUlC,CAAVkC,CAA3C;EACX;;EASAG,OAAOH,CAAP,EAA+B;IACvB,SAAK/D,IAAL,KAAc+D,EAAO/D,IAArB,EAAiC,UAAIkC,KAAJ,CAAU,wCAAV;IACrC,OAAO,KAAK8B,kBAAL,CAAwB,CAACjC,CAAD,EAAMF,CAAN,KACvBkC,EAAO5C,EAAP4C,CAAUlC,CAAVkC,MAAiB,CAAjBA,GAA2BhC,CAA3BgC,GACIhC,IAAMgC,EAAO5C,EAAP4C,CAAUlC,CAAVkC,CAFX,CAAP;EAIJ;;EAMAI,MAAMA,CAAN,EAA6B;IACzB,OAAO,KAAKH,kBAAL,CAAyBjC,CAAD,IAAUA,IAAMoC,CAAxC,CAAP;EACJ;;EAOQH,mBAAmBI,CAAnB,EAA8E;IAClF,OAAO,IAAIf,CAAJ,CAAW,KAAKnD,MAAL,CAAYS,GAAZ,CAAgByD,CAAhB,CAAX,CAAP;EACJ;;EAMAC,YAAoB;IACV,UAAe,KAAKtD,MAAL,EAAf;IACN,OAAO,KAAKiD,kBAAL,CAAyBjC,CAAD,IAASA,IAAMuC,CAAvC,CAAP;EACJ;;EAMAT,IAAIE,CAAJ,EAA4B;IACxB,OAAO,KAAK7D,MAAL,CAAYyB,MAAZ,CAAmB,CAAC4C,CAAD,EAAMxC,CAAN,EAAWF,CAAX,KAAiB0C,IAAOxC,IAAMgC,EAAO5C,EAAP4C,CAAUlC,CAAVkC,CAAjD,EAAgE,CAAhE,CAAP;EACJ;;EAMAS,MAAMT,CAAN,EAA8B;IAC1B,IAAI,KAAK/D,IAAL,GAAY,CAAZ,IAAiB+D,EAAO/D,IAAP+D,GAAc,CAAnC,EAA4C,UAAI7B,KAAJ,CAAU,8CAAV;IACtC,UAAc,IAAIzB,KAAJ,CAAkB,CAAlB,CAAd;IACN,SAAY,CAAZgE,IAAiB,KAAKtD,EAAL,CAAQ,CAAR,IAAa4C,EAAO5C,EAAP4C,CAAU,CAAVA,CAAb,GAA4B,KAAK5C,EAAL,CAAQ,CAAR,IAAa4C,EAAO5C,EAAP4C,CAAU,CAAVA,CAA1DU,EACAA,EAAY,CAAZA,IAAiB,KAAKtD,EAAL,CAAQ,CAAR,IAAa4C,EAAO5C,EAAP4C,CAAU,CAAVA,CAAb,GAA4B,KAAK5C,EAAL,CAAQ,CAAR,IAAa4C,EAAO5C,EAAP4C,CAAU,CAAVA,CAD1DU,EAEAA,EAAY,CAAZA,IAAiB,KAAKtD,EAAL,CAAQ,CAAR,IAAa4C,EAAO5C,EAAP4C,CAAU,CAAVA,CAAb,GAA4B,KAAK5C,EAAL,CAAQ,CAAR,IAAa4C,EAAO5C,EAAP4C,CAAU,CAAVA,CAF1DU,EAGO,IAAIpB,CAAJ,CAAWoB,CAAX,CAHP;EAIJ;;EAEAC,IAAIX,CAAJ,EAAoBY,CAApB,EAA0C;IACtC,OAAO,IAAItB,CAAJ,CAAW,KAAKnD,MAAL,CAAYS,GAAZ,CAAgB,CAACoB,CAAD,EAAMF,CAAN,KAAYE,IAAM4C,KAAQZ,EAAO5C,EAAP4C,CAAUlC,CAAVkC,IAAehC,CAAvB4C,CAAlC,CAAX,CAAP;EACJ;;EAEO,mBAAYC,CAAZ,EAAwBC,CAAxB,EAAoC;IACvC,IAAID,EAAG5E,IAAH4E,KAAY,CAAZA,IAAiBC,EAAG7E,IAAH6E,KAAY,CAAjC,EAA0C,UAAI3C,KAAJ,CAAU,qEAAV;IAC1C,OAAO,CAAC7B,KAAKyE,KAAL,CACND,EAAGL,KAAHK,CAASD,CAATC,EAAahB,GAAbgB,CAAiB,IAAIxB,CAAJ,CAAW,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAX,EAAsBgB,SAAtB,EAAjBQ,CADM,EAEND,EAAGf,GAAHe,CAAOC,CAAPD,CAFM,CAAR;EAIF;;AA9LsB;;ACArB,MAAMG,IAAU,IAAhB;AAAA,MCQcC,IAArB,MAA0B;EA6EtBjF,YAAYG,CAAZ,EAAuD;IAM/CC,kBAAS,IAAI8E,YAAJ,CAAiB,CAAjB,CAAT9E;IALAD,MAAW,MAAXA,KACA,KAAKgF,IAAL,GAAYhF,CADZA;EAGR;;EA/EI,QAAY;IACZ,OAAO,KAAKA,MAAL,CAAY,CAAZ,CAAP;EACJ;;EAEI,MAAEiF,CAAF,EAAiB;IACjB,KAAKjF,MAAL,CAAY,CAAZ,IAAiBiF,CAAjB;EACJ;;EAEI,QAAY;IACZ,OAAO,KAAKjF,MAAL,CAAY,CAAZ,CAAP;EACJ;;EAEI,MAAEiF,CAAF,EAAiB;IACjB,KAAKjF,MAAL,CAAY,CAAZ,IAAiBiF,CAAjB;EACJ;;EAEI,QAAY;IACZ,OAAO,KAAKjF,MAAL,CAAY,CAAZ,CAAP;EACJ;;EAEI,MAAEiF,CAAF,EAAiB;IACjB,KAAKjF,MAAL,CAAY,CAAZ,IAAiBiF,CAAjB;EACJ;;EAEI,QAAY;IACZ,OAAO,KAAKjF,MAAL,CAAY,CAAZ,CAAP;EACJ;;EAEI,MAAEiF,CAAF,EAAiB;IACjB,KAAKjF,MAAL,CAAY,CAAZ,IAAiBiF,CAAjB;EACJ;;EAEI,SAAuB;IAChB,QACH,KAAKjF,MAAL,CAAY,CAAZ,CADG,EAEH,KAAKA,MAAL,CAAY,CAAZ,CAFG;EAIX;;EAEI,OAAGA,CAAH,EAA6B;IACxB,YAAO,CAAP,IAAYA,EAAO,CAAPA,CAAZ,EACA,YAAO,CAAP,IAAYA,EAAO,CAAPA,CADZ;EAET;;EAGI,UAAgC;IACzB,QACH,KAAKA,MAAL,CAAY,CAAZ,CADG,EAEH,KAAKA,MAAL,CAAY,CAAZ,CAFG,EAGH,KAAKA,MAAL,CAAY,CAAZ,CAHG;EAKX;;EAEI,QAAIA,CAAJ,EAAsC;IACjC,YAAO,CAAP,IAAYA,EAAO,CAAPA,CAAZ,EACA,YAAO,CAAP,IAAYA,EAAO,CAAPA,CADZ,EAEA,YAAO,CAAP,IAAYA,EAAO,CAAPA,CAFZ;EAGT;;EAEI,WAAyC;IAClC,QACH,KAAKA,MAAL,CAAY,CAAZ,CADG,EAEH,KAAKA,MAAL,CAAY,CAAZ,CAFG,EAGH,KAAKA,MAAL,CAAY,CAAZ,CAHG,EAIH,KAAKA,MAAL,CAAY,CAAZ,CAJG;EAMX;;EAEI,SAAKA,CAAL,EAA+C;IAC1C,YAAO,CAAP,IAAYA,EAAO,CAAPA,CAAZ,EACA,YAAO,CAAP,IAAYA,EAAO,CAAPA,CADZ,EAEA,YAAO,CAAP,IAAYA,EAAO,CAAPA,CAFZ,EAGA,YAAO,CAAP,IAAYA,EAAO,CAAPA,CAHZ;EAIT;;EAYAiB,GAAGiE,CAAH,EAA0B;IACtB,OAAO,KAAKlF,MAAL,CAAYkF,CAAZ,CAAP;EACJ;;EAEA9D,QAAc;IACV,SAASO,IAAI,CAAb,EAAgBA,IAAI,CAApB,EAAuBA,GAAvB,EACI,KAAK3B,MAAL,CAAY2B,CAAZ,IAAiB,CAAjB;EAER;;EAEAwD,KAAKC,CAAL,EAAwB;IACfA,MAAQA,IAAO,IAAIN,CAAJ,EAAfM;;IAEL,SAASzD,IAAI,CAAb,EAAgBA,IAAI,CAApB,EAAuBA,GAAvB,EACSyD,SAAOzD,CAAPyD,IAAY,KAAKpF,MAAL,CAAY2B,CAAZ,CAAZyD;;IAGF;EACX;;EAEAC,OAAe;IACX,MAAMC,IAAI,KAAKA,CAAf;IAAA,MACMC,IAAI,KAAKA,CADf;IAAA,MAEMC,IAAI,KAAKA,CAFf;IAAA,MAGMC,IAAI,KAAKA,CAHf;IAKA,OAAOtF,KAAKyE,KAAL,CAAW,KAAOU,IAAIC,CAAJD,GAAQG,IAAID,CAAnB,CAAX,EAAkCC,IAAIA,CAAJA,GAAQH,IAAIA,CAAZG,GAAgBF,IAAIA,CAApBE,GAAwBD,IAAIA,CAA9D,CAAP;EACJ;;EAEAE,QAAgB;IACZ,MAAMJ,IAAI,KAAKA,CAAf;IAAA,MACMC,IAAI,KAAKA,CADf;IAAA,MAEMC,IAAI,KAAKA,CAFf;IAAA,MAGMC,IAAI,KAAKA,CAHf;IAKA,OAAOtF,KAAKyE,KAAL,CAAW,KAAOW,IAAIC,CAAJD,GAAQE,IAAIH,CAAnB,CAAX,EAAkCG,IAAIA,CAAJA,GAAQH,IAAIA,CAAZG,GAAgBF,IAAIA,CAApBE,GAAwBD,IAAIA,CAA9D,CAAP;EACJ;;EAEAG,MAAc;IACH,YAAKC,IAAL,CAAU,KAAO,KAAKN,CAAL,GAAS,KAAKE,CAAd,GAAkB,KAAKC,CAAL,GAAS,KAAKF,CAAvC,CAAV;EACX;;EAEAhE,OAAOsC,CAAP,EAAqBgC,IAAYhB,CAAjC,EAAmD;IAC/C,SAASlD,IAAI,CAAb,EAAgBA,IAAI,CAApB,EAAuBA,GAAvB,EACQ,SAAKmE,GAAL,CAAS,KAAK9F,MAAL,CAAY2B,CAAZ,IAAiBkC,EAAO5C,EAAP4C,CAAUlC,CAAVkC,CAA1B,IAA0CgC,CAA1C,EACO;;IAIR;EACX;;EAEAE,cAAoB;IAChB,YAAKT,CAAL,GAAS,CAAT,EACA,KAAKC,CAAL,GAAS,CADT,EAEA,KAAKC,CAAL,GAAS,CAFT,EAGA,KAAKC,CAAL,GAAS,CAHT,EAKO,IALP;EAMJ;;EAEAO,aAAmB;IACf,MAAMV,IAAI,KAAKA,CAAf;IAAA,MACMC,IAAI,KAAKA,CADf;IAAA,MAEMC,IAAI,KAAKA,CAFf;IAIA,YAAKC,CAAL,GAAS,CAAEtF,KAAKsD,IAAL,CAAUtD,KAAK2F,GAAL,CAAS,IAAMR,IAAIA,CAAV,GAAcC,IAAIA,CAAlB,GAAsBC,IAAIA,CAAnC,CAAV,CAAX,EAEO,IAFP;EAGJ;;EAEAxC,UAAgB;IACZ,MAAMW,IAAMmB,EAAKnB,GAALmB,CAAS,IAATA,EAAe,IAAfA,CAAZ;IAEA,IAAI,CAACnB,CAAL,EACI,YAAKqB,IAAL,GAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAZ,EAEO,IAFP;IAKE,UAASrB,IAAM,IAAMA,CAAZA,GAAkB,CAA3B;IAEN,YAAK2B,CAAL,IAAU,CAACW,CAAX,EACA,KAAKV,CAAL,IAAU,CAACU,CADX,EAEA,KAAKT,CAAL,IAAU,CAACS,CAFX,EAGA,KAAKR,CAAL,IAAUQ,CAHV,EAKO,IALP;EAMJ;;EAEAC,YAAkB;IACd,YAAKlG,MAAL,CAAY,CAAZ,KAAkB,EAAlB,EACA,KAAKA,MAAL,CAAY,CAAZ,KAAkB,EADlB,EAEA,KAAKA,MAAL,CAAY,CAAZ,KAAkB,EAFlB,EAIO,IAJP;EAKJ;;EAEAa,SAAiB;IACb,MAAMyE,IAAI,KAAKA,CAAf;IAAA,MACMC,IAAI,KAAKA,CADf;IAAA,MAEMC,IAAI,KAAKA,CAFf;IAAA,MAGMC,IAAI,KAAKA,CAHf;IAKO,YAAKhC,IAAL,CAAU6B,IAAIA,CAAJA,GAAQC,IAAIA,CAAZD,GAAgBE,IAAIA,CAApBF,GAAwBG,IAAIA,CAAtC;EACX;;EAEAtB,UAAUiB,CAAV,EAA6B;IAEpBA,MAAeA,QAAfA;IAEL,MAAME,IAAI,KAAKA,CAAf;IAAA,MACMC,IAAI,KAAKA,CADf;IAAA,MAEMC,IAAI,KAAKA,CAFf;IAAA,MAGMC,IAAI,KAAKA,CAHf;IAKI,QAAStF,KAAKsD,IAAL,CAAU6B,IAAIA,CAAJA,GAAQC,IAAIA,CAAZD,GAAgBE,IAAIA,CAApBF,GAAwBG,IAAIA,CAAtC,CAAT;IAEJ,OAAK5E,KASLA,IAAS,IAAIA,CAAbA,EAEAuE,EAAKE,CAALF,GAASE,IAAIzE,CAFbA,EAGAuE,EAAKG,CAALH,GAASG,IAAI1E,CAHbA,EAIAuE,EAAKI,CAALJ,GAASI,IAAI3E,CAJbA,EAKAuE,EAAKK,CAALL,GAASK,IAAI5E,CALbA,EAOOuE,CAhBFvE,KACDuE,EAAKE,CAALF,GAAS,CAATA,EACAA,EAAKG,CAALH,GAAS,CADTA,EAEAA,EAAKI,CAALJ,GAAS,CAFTA,EAGAA,EAAKK,CAALL,GAAS,CAHTA,EAKOA,CANNvE,CAAL;EAiBJ;;EAEA+C,IAAIuC,CAAJ,EAAuB;IACnB,SAASxE,IAAI,CAAb,EAAgBA,IAAI,CAApB,EAAuBA,GAAvB,EACI,KAAK3B,MAAL,CAAY2B,CAAZ,KAAkBwE,EAAMlF,EAANkF,CAASxE,CAATwE,CAAlB;;IAGG;EACX;;EAEAhE,SAASgE,CAAT,EAA4B;IAClB,UAAM,KAAKnG,MAAL,CAAY,CAAZ,CAAN;IAAA,MACAoG,IAAM,KAAKpG,MAAL,CAAY,CAAZ,CADN;IAAA,MAEAqG,IAAM,KAAKrG,MAAL,CAAY,CAAZ,CAFN;IAAA,MAGAsG,IAAM,KAAKtG,MAAL,CAAY,CAAZ,CAHN;IAAA,MAKAuG,IAAMJ,EAAMb,CALZ;IAAA,MAMAkB,IAAML,EAAMZ,CANZ;IAAA,MAOAkB,IAAMN,EAAMX,CAPZ;IAAA,MAQAkB,IAAMP,EAAMV,CARZ;IAUN,YAAKH,CAAL,GAASqB,IAAMD,CAANC,GAAYL,IAAMC,CAAlBI,GAAwBP,IAAMK,CAA9BE,GAAoCN,IAAMG,CAAnD,EACA,KAAKjB,CAAL,GAASa,IAAMM,CAANN,GAAYE,IAAME,CAAlBJ,GAAwBC,IAAME,CAA9BH,GAAoCO,IAAMF,CADnD,EAEA,KAAKjB,CAAL,GAASa,IAAMK,CAANL,GAAYC,IAAMG,CAAlBJ,GAAwBM,IAAMH,CAA9BH,GAAoCD,IAAMG,CAFnD,EAGA,KAAKd,CAAL,GAASa,IAAMI,CAANJ,GAAYK,IAAMJ,CAAlBD,GAAwBF,IAAMI,CAA9BF,GAAoCD,IAAMI,CAHnD,EAKO,IALP;EAMJ;;EAEO,WAAIG,CAAJ,EAAcC,CAAd,EAAgC;IACnC,OAAOD,EAAGtB,CAAHsB,GAAOC,EAAGvB,CAAVsB,GAAcA,EAAGrB,CAAHqB,GAAOC,EAAGtB,CAAxBqB,GAA4BA,EAAGpB,CAAHoB,GAAOC,EAAGrB,CAAtCoB,GAA0CA,EAAGnB,CAAHmB,GAAOC,EAAGpB,CAA3D;EACJ;;EAEO,WAAImB,CAAJ,EAAcC,CAAd,EAA8B;IAC3B,UAAO,IAAI/B,CAAJ,EAAP;IAED,aAAI8B,EAAGtB,CAAHsB,GAAOC,EAAGvB,CAAdF,EACAA,MAAIwB,EAAGrB,CAAHqB,GAAOC,EAAGtB,CADdH,EAEAA,MAAIwB,EAAGpB,CAAHoB,GAAOC,EAAGrB,CAFdJ,EAGAA,MAAIwB,EAAGnB,CAAHmB,GAAOC,EAAGpB,CAHdL,EAKEA,CALF;EAMT;;EAEO,eAAQwB,CAAR,EAAkBC,CAAlB,EAAkC;IAC/B,UAAO,IAAI/B,CAAJ,EAAP;IAAA,MAEA6B,IAAMC,EAAGtB,CAFT;IAAA,MAGAc,IAAMQ,EAAGrB,CAHT;IAAA,MAIAc,IAAMO,EAAGpB,CAJT;IAAA,MAKAc,IAAMM,EAAGnB,CALT;IAAA,MAOAc,IAAMM,EAAGvB,CAPT;IAAA,MAQAkB,IAAMK,EAAGtB,CART;IAAA,MASAkB,IAAMI,EAAGrB,CATT;IAAA,MAUAkB,IAAMG,EAAGpB,CAVT;IAYN,SAAKH,CAALF,GAASuB,IAAMD,CAANC,GAAYL,IAAMC,CAAlBI,GAAwBP,IAAMK,CAA9BE,GAAoCN,IAAMG,CAAnDpB,EACAA,EAAKG,CAALH,GAASgB,IAAMM,CAANN,GAAYE,IAAME,CAAlBJ,GAAwBC,IAAME,CAA9BH,GAAoCO,IAAMF,CADnDrB,EAEAA,EAAKI,CAALJ,GAASiB,IAAMK,CAANL,GAAYC,IAAMG,CAAlBJ,GAAwBM,IAAMH,CAA9BH,GAAoCD,IAAMG,CAFnDnB,EAGAA,EAAKK,CAALL,GAASkB,IAAMI,CAANJ,GAAYK,IAAMJ,CAAlBD,GAAwBF,IAAMI,CAA9BF,GAAoCD,IAAMI,CAHnDrB,EAKOA,CALP;EAMJ;;EAEO,aAAMwB,CAAN,EAAgBC,CAAhB,EAAgC;IAC7B,UAAO,IAAI/B,CAAJ,EAAP;IAAA,MAEA6B,IAAMC,EAAGtB,CAFT;IAAA,MAGAc,IAAMQ,EAAGrB,CAHT;IAAA,MAIAc,IAAMO,EAAGpB,CAJT;IAAA,MAKAc,IAAMM,EAAGnB,CALT;IAAA,MAOAc,IAAMM,EAAGvB,CAPT;IAAA,MAQAkB,IAAMK,EAAGtB,CART;IAAA,MASAkB,IAAMI,EAAGrB,CATT;IAAA,MAUAkB,IAAMG,EAAGpB,CAVT;IAYN,SAAKH,CAALF,GAASkB,IAAMG,CAANH,GAAYD,IAAMK,CAAlBJ,GAAwBK,IAAMH,CAA9BF,GAAoCF,IAAMG,CAAnDnB,EACAA,EAAKG,CAALH,GAASkB,IAAMI,CAANJ,GAAYK,IAAMJ,CAAlBD,GAAwBF,IAAMI,CAA9BF,GAAoCD,IAAMI,CADnDrB,EAEAA,EAAKI,CAALJ,GAASkB,IAAMC,CAAND,GAAYK,IAAMD,CAAlBJ,GAAwBF,IAAMK,CAA9BH,GAAoCD,IAAMG,CAFnDpB,EAGAA,EAAKK,CAALL,GAASkB,IAAME,CAANF,GAAYF,IAAMM,CAAlBJ,GAAwBD,IAAME,CAA9BD,GAAoCK,IAAMF,CAHnDrB,EAKOA,CALP;EAMJ;;EAEO,gBAASwB,CAAT,EAAmBC,CAAnB,EAA6BpC,CAA7B,EAAiD;IAC9C,UAAO,IAAIK,CAAJ,EAAP;IAEN,IAAIL,KAAQ,CAAZ,EACI,SAAKO,IAALI,GAAYwB,EAAG5B,IAAfI,EAEOA,CAFP;IAGJ,IAAWX,KAAQ,CAAnB,EACI,SAAKO,IAALI,GAAYyB,EAAG7B,IAAfI,EAEOA,CAFP;IAKJ,IAAI0B,IAAMhC,EAAKnB,GAALmB,CAAS8B,CAAT9B,EAAa+B,CAAb/B,CAAV;IACM,UAAM+B,EAAG1B,IAAH0B,EAAN;IAEFC,IAAM,CAANA,KACAC,EAAI/D,OAAJ+D,IACAD,IAAM,CAACA,CAFPA;IAKA,OACAE,CADA;IAGJ,IAAIF,IAAM,MAAV,EACIG,IAAK,IAAIxC,CAATwC,EACAD,IAAK,IAAIvC,CADTwC,CADJ,KAGO;MACH,MAAMC,IAAc/G,KAAKsD,IAAL,CAAU,IAAIqD,IAAMA,CAApB,CAApB;MAAA,MACMK,IAAgBhH,KAAKyE,KAAL,CAAWsC,CAAX,EAAgBJ,CAAhB,CADtB;MAAA,MAGMM,IAAqB,IAAIF,CAH/B;MAKAD,IAAK9G,KAAK+G,GAAL,CAAK,CAAK,IAAIzC,CAAT,IAAiB0C,CAAtB,IAA+BC,CAApCH,EACAD,IAAK7G,KAAK+G,GAAL,CAAK,CAAK,IAAIzC,CAAT,IAAiB0C,CAAtB,IAA+BC,CADpCH;IAEJ;IAEA,SAAK3B,CAALF,GAAS6B,IAAKL,EAAGtB,CAAR2B,GAAYD,IAAKD,EAAIzB,CAA9BF,EACAA,EAAKG,CAALH,GAAS6B,IAAKL,EAAGrB,CAAR0B,GAAYD,IAAKD,EAAIxB,CAD9BH,EAEAA,EAAKI,CAALJ,GAAS6B,IAAKL,EAAGpB,CAARyB,GAAYD,IAAKD,EAAIvB,CAF9BJ,EAGAA,EAAKK,CAALL,GAAS6B,IAAKL,EAAGnB,CAARwB,GAAYD,IAAKD,EAAItB,CAH9BL,EAKOA,CALP;EAMJ;;EAEO,WAAIwB,CAAJ,EAAcC,CAAd,EAAwBpC,CAAxB,EAA4C;IACzC,UAAO,IAAIK,CAAJ,EAAP;IAAA,MAEAuC,IAAeT,EAAGtB,CAAHsB,GAAOC,EAAGvB,CAAVsB,GAAcA,EAAGrB,CAAHqB,GAAOC,EAAGtB,CAAxBqB,GAA4BA,EAAGpB,CAAHoB,GAAOC,EAAGrB,CAAtCoB,GAA0CA,EAAGnB,CAAHmB,GAAOC,EAAGpB,CAFnE;IAIN,IAAItF,KAAK2F,GAAL,CAASuB,CAAT,KAA0B,CAA9B,EACI,SAAKrC,IAALI,GAAYwB,EAAG5B,IAAfI,EAEOA,CAFP;IAKE,UAAYjF,KAAKmH,IAAL,CAAUD,CAAV,CAAZ;IAAA,MACAE,IAAepH,KAAKsD,IAAL,CAAU,IAAM4D,IAAeA,CAA/B,CADf;IAGN,IAAIlH,KAAK2F,GAAL,CAASyB,CAAT,IAAyB,IAA7B,EACI,SAAKjC,CAALF,GAASwB,EAAGtB,CAAHsB,GAAO,GAAPA,GAAaC,EAAGvB,CAAHuB,GAAO,GAA7BzB,EACAA,EAAKG,CAALH,GAASwB,EAAGrB,CAAHqB,GAAO,GAAPA,GAAaC,EAAGtB,CAAHsB,GAAO,GAD7BzB,EAEAA,EAAKI,CAALJ,GAASwB,EAAGpB,CAAHoB,GAAO,GAAPA,GAAaC,EAAGrB,CAAHqB,GAAO,GAF7BzB,EAGAA,EAAKK,CAALL,GAASwB,EAAGnB,CAAHmB,GAAO,GAAPA,GAAaC,EAAGpB,CAAHoB,GAAO,GAH7BzB,EAKOA,CALP;IAQJ,MAAMoC,IAASrH,KAAK+G,GAAL,CAAK,CAAK,IAAIzC,CAAT,IAAiBgD,CAAtB,IAAmCF,CAAlD;IAAA,MACMG,IAASvH,KAAK+G,GAAL,CAASzC,IAAOgD,CAAhB,IAA6BF,CAD5C;IAGA,SAAKjC,CAALF,GAASwB,EAAGtB,CAAHsB,GAAOY,CAAPZ,GAAgBC,EAAGvB,CAAHuB,GAAOa,CAAhCtC,EACAA,EAAKG,CAALH,GAASwB,EAAGrB,CAAHqB,GAAOY,CAAPZ,GAAgBC,EAAGtB,CAAHsB,GAAOa,CADhCtC,EAEAA,EAAKI,CAALJ,GAASwB,EAAGpB,CAAHoB,GAAOY,CAAPZ,GAAgBC,EAAGrB,CAAHqB,GAAOa,CAFhCtC,EAGAA,EAAKK,CAALL,GAASwB,EAAGnB,CAAHmB,GAAOY,CAAPZ,GAAgBC,EAAGpB,CAAHoB,GAAOa,CAHhCtC,EAKOA,CALP;EAMJ;;EAEO,qBAAcuC,CAAd,EAA4BR,CAA5B,EAAiD;IACpD,IAAIQ,EAAK7H,IAAL6H,KAAc,CAAlB,EAA2B,UAAI3F,KAAJ,CAAU,gCAAV;IACrB,UAAO,IAAI8C,CAAJ,EAAP;IAEGqC;IACH,UAAMhH,KAAK+G,GAAL,CAASC,CAAT,CAAN;IAEN,SAAK7B,CAALF,GAASuC,EAAK1G,EAAL0G,CAAQ,CAARA,IAAaT,CAAtB9B,EACAA,EAAKG,CAALH,GAASuC,EAAK1G,EAAL0G,CAAQ,CAARA,IAAaT,CADtB9B,EAEAA,EAAKI,CAALJ,GAASuC,EAAK1G,EAAL0G,CAAQ,CAARA,IAAaT,CAFtB9B,EAGKA,MAAIjF,KAAK2G,GAAL,CAASK,CAAT,CAHT/B,EAKOA,CALP;EAMJ;;AAhZsB,CDRnB;ACQP,IAAqBwC,IAArB9C;AAqFI7E,EArFiB2H,CAqFjB3H,EAAgB,UAAhBA,EAA2B,IAAI6E,CAAJ,GAAWiB,WAAX,EAA3B9F","names":["Matrix","constructor","rows","columns","values","__publicField","_rows","Math","max","_columns","_values","Array","fill","map","newValues","minRow","min","length","minCol","r","c","at","row","col","reset","addAColumn","addARow","equals","mat","reduce","eql","i","eql2","val","j","setAsIdentity","Error","forEach","dimension","multiply","resMatrix","sum","elm","k","determinant","det","sign","minor","getCofactor","filter","v","transpose","inverse","pow","transposedCofactor","Vector","minSize","addAValue","push","vec","negate","sqrt","squaredLength","dot","add","vector","operateOnAllValues","substract","divide","scale","operation","normalize","vectorLength","res","cross","crossValues","mix","time","Va","Vb","atan2","EPSILON","_Quat","Float32Array","xyzw","value","index","copy","dest","roll","x","y","z","w","pitch","yaw","asin","threshold","abs","setIdentity","calculateW","invDot","conjugate","other","q1y","q1z","q1w","q2x","q2y","q2z","q2w","q1x","q1","q2","cos","q2a","k1","k0","sin","angle","oneOverSin","cosHalfTheta","acos","sinHalfTheta","ratioA","halfTheta","ratioB","axis","Quat"],"sources":["../src/Matrix.ts","../src/Vector.ts","../src/constants.ts","../src/quat.ts"],"sourcesContent":["export default class Matrix {\n\n    /** Number of rows of the matrix */\n    private _rows: number;\n    /** Number of columns of the matrix */\n    private _columns: number;\n    /** Values of the matrix as a two dimensional array */\n    private _values: number[][];\n\n    constructor(rows: number, columns: number, values?: number[][]) {\n        this._rows = Math.max(rows, 1);\n        this._columns = Math.max(columns, 1);\n        // Create matrix filled with 0 by default\n        this._values = new Array<number[]>(this._rows).fill([]).map(() => new Array<number>(this._columns).fill(0));\n\n        if (values) {\n            this.values = values;\n        }\n    }\n\n    get rows() {\n        return this._rows;\n    }\n    get columns() {\n        return this._columns;\n    }\n    get values() {\n        return this._values;\n    }\n\n    /**\n     * Set values into the matrix.\n     * If the parameters matrix is to wide, the values are cropped to the current matrix size.\n     * It the parameters matrix is to small, remaining cells will be filled with 0.\n     * @param newValues Arrays of new values.\n     */\n    set values(newValues: number[][]) {\n        const minRow = Math.min(newValues.length, this.rows);\n        const minCol = Math.min(newValues[0].length, this.columns);\n        for (let r = 0; r < minRow; r++) {\n            for (let c = 0; c < minCol; c++) {\n                this.values[r][c] = newValues[r][c];\n            }\n        }\n    }\n\n    /**\n     * Get a matrix value, from its position\n     * @param row Matrix line, from 0 to `rows`\n     * @param col Matric column, from 0 to `columns`\n     */\n    at(row: number, col: number): number {\n        return this.values[row][col];\n    }\n\n    /**\n     * Sets all matrix values to 0\n     */\n    reset(): void {\n        this.values = this.values.map((row) => row.map(() => 0));\n    }\n\n    /**\n     * Add an new column to the matrix, filled with 0\n     */\n    addAColumn(): Matrix {\n        return new Matrix(this.rows, this.columns + 1, this.values);\n    }\n\n    /**\n     * Add an new row to the matrix, filled with 0\n     */\n    addARow(): Matrix {\n        return new Matrix(this.rows + 1, this.columns, this.values);\n    }\n\n    /**\n     * Check if two matrix are equals, value by value\n     * @param mat The matrix against to check equality\n     */\n    equals(mat: Matrix): boolean {\n        // Reduce on rows -> reduce on columns -> if a value != then false!\n        return (this.rows === mat.rows && this.columns === mat.columns)\n            && this.values.reduce(// Rows\n                (eql: boolean, row, i) => eql && row.reduce(// Columns (real values)\n                        (eql2: boolean, val, j) => eql2 && mat.at(i, j) === val, eql)\n                , true);\n    }\n\n    /**\n     * Sets the matrix as an identity matrix\n     */\n    setAsIdentity() {\n        if (this.rows !== this.columns) throw new Error(\"Dimension error! The matrix isn't squared!\");\n        this.values.forEach((row, i) => {\n            row.forEach((c, j) => {\n                this.values[i][j] = i === j ? 1 : 0;\n            });\n        });\n        return this;\n    }\n\n    /**\n     * Gets an identity matrix (1 on diagonal)\n     * @param dimension Dimension of the squared matrix\n     */\n    static identity(dimension: number): Matrix {\n        if (dimension < 1) throw Error('Dimension error! Matrix dimension must be positive.');\n        return new Matrix(dimension, dimension).setAsIdentity();\n    }\n\n    /**\n     * Computes the product with another matrix\n     * @param mat The second operand matrix\n     * @throws Error if matrixA.columns != matrixB.rows\n     * @return A new Matrix, result of the multiplication\n     */\n    multiply(mat: Matrix): Matrix {\n        if (this.columns !== mat.rows) throw new Error(\"Dimension error! The operand matrix must have the same number of rows as 'this' matrix columns!\");\n        const resMatrix = new Matrix(this.rows, mat.columns);\n        resMatrix.values = resMatrix.values.map((row, i) => {\n            return row.map((val, j) => {\n                return this.values[i].reduce((sum, elm, k) => sum + (elm * mat.at(k, j)), 0);\n            });\n        });\n        return resMatrix;\n    }\n\n    /**\n     * Computes the determinant of the matrix\n     * @throws Error if the matrix is not squared\n     */\n    determinant(): number {\n        if (this.rows !== this.columns) throw new Error(\"Dimension error! The matrix isn't squared!\");\n        if (this.rows === this.columns && this.columns === 1) { return this.values[0][0]; }\n\n        let det = 0;\n        let sign = 1;\n        if (this.rows === 2) {\n            det = this.values[0][0] * this.values[1][1] - this.values[1][0] * this.values[0][1];\n        } else {\n            for (let i = 0; i < this.rows; i++) {\n                const minor = this.getCofactor(0, i);\n                det += sign * this.at(0, i) * minor.determinant();\n                sign = -sign;\n            }\n        }\n        return det;\n    }\n\n    /**\n     * Gets a cofactor matrix\n     * @param row The row to omit in the matrix\n     * @param col The column to omit in the matrix\n     * @return The cofactor matrix sized (r-1)x(c-1)\n     */\n    getCofactor(row: number, col: number): Matrix {\n        return new Matrix(this.rows - 1, this.columns - 1, this.values\n            .filter((v, i) => i !== row) // Remove the unnecessary row\n            .map((c) => c.filter((v, i) => i !== col)));\n    }\n\n    /**\n     * Computes a transposed the matrix\n     * @return A new matrix sized (columns) x (rows)\n     */\n    transpose(): Matrix {\n        return new Matrix(this.columns, this.rows, new Array<number[]>(this.columns).fill([])\n            .map((row, i) => new Array<number>(this.rows).fill(0).map((c, j) => this.at(j, i))));\n    }\n\n    /**\n     * Computes the inversed matrix\n     * @return A new matrix inversed\n     */\n    inverse() {\n        if (this.rows !== this.columns) throw new Error(\"Dimension error! The matrix isn't squared!\");\n        const det = this.determinant();\n        if (det === 0) throw new Error(\"Determinant is 0, can't compute inverse.\");\n\n        // Get cofactor matrix: i.e. for each matrix value, get the cofactor's determinant\n        const cofactorMatrix = new Matrix (this.rows, this.columns,\n            this.values.map((row, i) => row.map((val, j) => {\n                const sign = Math.pow(-1, i + j);\n                return sign * this.getCofactor(i, j).determinant();\n            })));\n        // Transpose it\n        const transposedCofactor = cofactorMatrix.transpose();\n        // Compute inverse of transposed / determinant on each value\n        return new Matrix(this.rows, this.columns,\n            this.values.map((row, i) => row.map((val, j) => transposedCofactor.at(i, j) / det)));\n    }\n\n}\n","export default class Vector {\n\n    /** Values of the vector */\n    private _values: number[];\n\n    constructor(values?: number[]) {\n        // Create matrix filled with 0 by default\n        this._values = new Array<number>((values || [0]).length).fill(0);\n\n        if (values) {\n            this.values = values;\n        }\n    }\n\n    get rows() {\n        return this.values.length;\n    }\n\n    get values() {\n        return this._values;\n    }\n\n    /**\n     * Set values into the vector.\n     * If the parameters vector is to wide, the values are cropped to the current vector size.\n     * It the parameters vector is to small, remaining cells will be filled with 0.\n     * @param newValues Arrays of new values.\n     */\n    set values(newValues: number[]) {\n        const minSize = Math.min(this.values.length, newValues.length);\n        for (let i = 0; i < minSize; i++) {\n            this.values[i] = newValues[i];\n        }\n    }\n\n    /**\n     * Get a matrix value, from its position\n     * @param row Matrix line, from 0 to `rows`\n     */\n    at(row: number): number {\n        return this.values[row];\n    }\n\n    /**\n     * Sets all matrix values to 0\n     */\n    reset(): void {\n        this.values = this.values.fill(0);\n    }\n\n    /**\n     * Add an new row to the matrix, filled with 0\n     */\n    addAValue(): Vector {\n        this.values.push(0);\n        return new Vector(this.values);\n    }\n\n    /**\n     * Check if two matrix are equals, value by value\n     * @param mat The matrix against to check equality\n     */\n    equals(vec: Vector): boolean {\n        return (this.rows === vec.rows)\n            && this.values.reduce((eql: boolean, val, i) => eql && vec.at(i) === val, true);\n    }\n\n    /**\n     * Negate all values of the vector (get the opposite sign)\n     * @return A new vector whose all values have the opposed sign\n     */\n    negate(): Vector {\n        return new Vector(this.values.map((val) => -val));\n    }\n\n    /** Get the length of the vector */\n    length(): number {\n        return Math.sqrt(this.squaredLength());\n    }\n\n    /** Get the squared length of the vector */\n    squaredLength(): number {\n        return this.dot(this);\n    }\n\n    /**\n     * Add all vector values with the same position value of the operand vector\n     * @param vector The operand vector\n     * @throws Error if the two vectors don't have the same dimension\n     * @return a new Vector with the result values\n     */\n    add(vector: Vector): Vector {\n        if (this.rows !== vector.rows) throw new Error(\"Vectors don't have the same dimension!\");\n        return this.operateOnAllValues((val, i) => (val + vector.at(i)));\n    }\n\n    /**\n     * Sunstract all vector values with the same position value of the operand vector\n     * @param vector The operand vector\n     * @throws Error if the two vectors don't have the same dimension\n     * @return a new Vector with the result values\n     */\n    substract(vector: Vector): Vector {\n        if (this.rows !== vector.rows) throw new Error(\"Vectors don't have the same dimension!\");\n        return this.operateOnAllValues((val, i) => (val - vector.at(i)));\n    }\n\n    /**\n     * Multiply all vector values with the same position value of the operand vector\n     * @param vector The operand vector\n     * @throws Error if the two vectors don't have the same dimension\n     * @return a new Vector with the result values\n     */\n    multiply(vector: Vector): Vector {\n        if (this.rows !== vector.rows) throw new Error(\"Vectors don't have the same dimension!\");\n        return this.operateOnAllValues((val, i) => (val * vector.at(i)));\n    }\n\n    /**\n     * Divide all vector values with the same position value of the operand vector\n     * Be aware of divisions by 0!\n     * @param vector The operand vector\n     * @throws Error if the two vectors don't have the same dimension\n     * @return a new Vector with the result values\n     */\n    divide(vector: Vector): Vector {\n        if (this.rows !== vector.rows) throw new Error(\"Vectors don't have the same dimension!\");\n        return this.operateOnAllValues((val, i) => {\n            if (vector.at(i) === 0) return val;\n            return (val / vector.at(i));\n        });\n    }\n\n    /**\n     * Multiply all vector values by the given number\n     * @param scale The number to multiply with the values\n     */\n    scale(scale: number): Vector {\n        return this.operateOnAllValues((val) => (val * scale));\n    }\n\n    /**\n     * Run a function on all vector values, as a map.\n     * @param operation The mapping method\n     * @return a new Vector with the operation done on all its values\n     */\n    private operateOnAllValues(operation: (val: number, index: number) => number): Vector {\n        return new Vector(this.values.map(operation));\n    }\n\n    /**\n     * Computes the normalized vector\n     * @return The normalized vector\n     */\n    normalize(): Vector {\n        const vectorLength = this.length();\n        return this.operateOnAllValues((val) => val / vectorLength);\n    }\n\n    /**\n     * Computes the dot product of vectors\n     * @param vector The operand vector\n     */\n    dot(vector: Vector): number {\n        return this.values.reduce((res, val, i) => res + (val * vector.at(i)), 0);\n    }\n\n    /**\n     * Computes the cross product of vectors\n     * @param vector The operand vector\n     */\n    cross(vector: Vector): Vector {\n        if (this.rows < 3 || vector.rows < 3) throw new Error('Cross product is possible on 3D vectors only');\n        const crossValues = new Array<number>(3);\n        crossValues[0] = this.at(1) * vector.at(2) - this.at(2) * vector.at(1);\n        crossValues[1] = this.at(2) * vector.at(0) - this.at(0) * vector.at(2);\n        crossValues[2] = this.at(0) * vector.at(1) - this.at(1) * vector.at(0);\n        return new Vector(crossValues);\n    }\n\n    mix(vector: Vector, time: number): Vector {\n        return new Vector(this.values.map((val, i) => val + time * (vector.at(i) - val)));\n    }\n\n    static get360angle(Va: Vector, Vb: Vector) {\n        if (Va.rows !== 3 || Vb.rows !== 3) throw new Error('Vectors must be in 3D!. You can add a 1 dimension if it is missing.');\n        return -Math.atan2(\n          Vb.cross(Va).dot(new Vector([0, 0, 1]).normalize()),\n          Va.dot(Vb)\n        );\n      }\n}\n","export const EPSILON = 0.00001;\n","import { EPSILON } from './constants';\nimport Vector from './Vector';\n\n/**\n * Class representing a Math Quat\n *\n * TODO: To refactor with 'Matrix.ts' style.\n */\nexport default class Quat {\n\n    get x(): number {\n        return this.values[0];\n    }\n\n    set x(value: number) {\n        this.values[0] = value;\n    }\n\n    get y(): number {\n        return this.values[1];\n    }\n\n    set y(value: number) {\n        this.values[1] = value;\n    }\n\n    get z(): number {\n        return this.values[2];\n    }\n\n    set z(value: number) {\n        this.values[2] = value;\n    }\n    \n    get w(): number {\n        return this.values[3];\n    }\n    \n    set w(value: number) {\n        this.values[3] = value;\n    }\n\n    get xy(): [number, number] {\n        return [\n            this.values[0],\n            this.values[1],\n        ];\n    }\n\n    set xy(values: [number, number]) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n    }\n\n\n    get xyz(): [number, number, number] {\n        return [\n            this.values[0],\n            this.values[1],\n            this.values[2],\n        ];\n    }\n\n    set xyz(values: [number, number, number]) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n        this.values[2] = values[2];\n    }\n\n    get xyzw(): [number, number, number, number] {\n        return [\n            this.values[0],\n            this.values[1],\n            this.values[2],\n            this.values[3],\n        ];\n    }\n\n    set xyzw(values: [number, number, number, number]) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n        this.values[2] = values[2];\n        this.values[3] = values[3];\n    }\n\n    constructor(values?: [number, number, number, number]) {\n        if (values !== undefined) {\n            this.xyzw = values;\n        }\n    }\n\n    private values = new Float32Array(4);\n\n    static readonly identity = new Quat().setIdentity();\n\n    at(index: number): number {\n        return this.values[index];\n    }\n\n    reset(): void {\n        for (let i = 0; i < 4; i++) {\n            this.values[i] = 0;\n        }\n    }\n\n    copy(dest?: Quat): Quat {\n        if (!dest) { dest = new Quat(); }\n\n        for (let i = 0; i < 4; i++) {\n            dest.values[i] = this.values[i];\n        }\n\n        return dest;\n    }\n\n    roll(): number {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n\n        return Math.atan2(2.0 * (x * y + w * z), w * w + x * x - y * y - z * z);\n    }\n\n    pitch(): number {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n\n        return Math.atan2(2.0 * (y * z + w * x), w * w - x * x - y * y + z * z);\n    }\n\n    yaw(): number {\n        return Math.asin(2.0 * (this.x * this.z - this.w * this.y));\n    }\n\n    equals(vector: Quat, threshold = EPSILON): boolean {\n        for (let i = 0; i < 4; i++) {\n            if (Math.abs(this.values[i] - vector.at(i)) > threshold) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    setIdentity(): Quat {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 1;\n\n        return this;\n    }\n\n    calculateW(): Quat {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n\n        this.w = -(Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z)));\n\n        return this;\n    }\n\n    inverse(): Quat {\n        const dot = Quat.dot(this, this);\n\n        if (!dot) {\n            this.xyzw = [0, 0, 0, 0];\n\n            return this;\n        }\n\n        const invDot = dot ? 1.0 / dot : 0;\n\n        this.x *= -invDot;\n        this.y *= -invDot;\n        this.z *= -invDot;\n        this.w *= invDot;\n\n        return this;\n    }\n\n    conjugate(): Quat {\n        this.values[0] *= -1;\n        this.values[1] *= -1;\n        this.values[2] *= -1;\n\n        return this;\n    }\n\n    length(): number {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n\n        return Math.sqrt(x * x + y * y + z * z + w * w);\n    }\n\n    normalize(dest?: Quat): Quat {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        if (!dest) { dest = this; }\n\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n\n        let length = Math.sqrt(x * x + y * y + z * z + w * w);\n\n        if (!length) {\n            dest.x = 0;\n            dest.y = 0;\n            dest.z = 0;\n            dest.w = 0;\n\n            return dest;\n        }\n\n        length = 1 / length;\n\n        dest.x = x * length;\n        dest.y = y * length;\n        dest.z = z * length;\n        dest.w = w * length;\n\n        return dest;\n    }\n\n    add(other: Quat): Quat {\n        for (let i = 0; i < 4; i++) {\n            this.values[i] += other.at(i);\n        }\n\n        return this;\n    }\n\n    multiply(other: Quat): Quat {\n        const q1x = this.values[0];\n        const q1y = this.values[1];\n        const q1z = this.values[2];\n        const q1w = this.values[3];\n\n        const q2x = other.x;\n        const q2y = other.y;\n        const q2z = other.z;\n        const q2w = other.w;\n\n        this.x = q1x * q2w + q1w * q2x + q1y * q2z - q1z * q2y;\n        this.y = q1y * q2w + q1w * q2y + q1z * q2x - q1x * q2z;\n        this.z = q1z * q2w + q1w * q2z + q1x * q2y - q1y * q2x;\n        this.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;\n\n        return this;\n    }\n\n    static dot(q1: Quat, q2: Quat): number {\n        return q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w;\n    }\n\n    static sum(q1: Quat, q2: Quat): Quat {\n        const dest = new Quat();\n\n        dest.x = q1.x + q2.x;\n        dest.y = q1.y + q2.y;\n        dest.z = q1.z + q2.z;\n        dest.w = q1.w + q2.w;\n\n        return dest;\n    }\n\n    static product(q1: Quat, q2: Quat): Quat {\n        const dest = new Quat();\n\n        const q1x = q1.x;\n        const q1y = q1.y;\n        const q1z = q1.z;\n        const q1w = q1.w;\n\n        const q2x = q2.x;\n        const q2y = q2.y;\n        const q2z = q2.z;\n        const q2w = q2.w;\n\n        dest.x = q1x * q2w + q1w * q2x + q1y * q2z - q1z * q2y;\n        dest.y = q1y * q2w + q1w * q2y + q1z * q2x - q1x * q2z;\n        dest.z = q1z * q2w + q1w * q2z + q1x * q2y - q1y * q2x;\n        dest.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;\n\n        return dest;\n    }\n\n    static cross(q1: Quat, q2: Quat): Quat {\n        const dest = new Quat();\n\n        const q1x = q1.x;\n        const q1y = q1.y;\n        const q1z = q1.z;\n        const q1w = q1.w;\n\n        const q2x = q2.x;\n        const q2y = q2.y;\n        const q2z = q2.z;\n        const q2w = q2.w;\n\n        dest.x = q1w * q2z + q1z * q2w + q1x * q2y - q1y * q2x;\n        dest.y = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;\n        dest.z = q1w * q2x + q1x * q2w + q1y * q2z - q1z * q2y;\n        dest.w = q1w * q2y + q1y * q2w + q1z * q2x - q1x * q2z;\n\n        return dest;\n    }\n\n    static shortMix(q1: Quat, q2: Quat, time: number): Quat {\n        const dest = new Quat();\n\n        if (time <= 0.0) {\n            dest.xyzw = q1.xyzw;\n\n            return dest;\n        } else if (time >= 1.0) {\n            dest.xyzw = q2.xyzw;\n\n            return dest;\n        }\n\n        let cos = Quat.dot(q1, q2);\n        const q2a = q2.copy();\n\n        if (cos < 0.0) {\n            q2a.inverse();\n            cos = -cos;\n        }\n\n        let k0: number;\n        let k1: number;\n\n        if (cos > 0.9999) {\n            k0 = 1 - time;\n            k1 = 0 + time;\n        } else {\n            const sin: number = Math.sqrt(1 - cos * cos);\n            const angle: number = Math.atan2(sin, cos);\n\n            const oneOverSin: number = 1 / sin;\n\n            k0 = Math.sin((1 - time) * angle) * oneOverSin;\n            k1 = Math.sin((0 + time) * angle) * oneOverSin;\n        }\n\n        dest.x = k0 * q1.x + k1 * q2a.x;\n        dest.y = k0 * q1.y + k1 * q2a.y;\n        dest.z = k0 * q1.z + k1 * q2a.z;\n        dest.w = k0 * q1.w + k1 * q2a.w;\n\n        return dest;\n    }\n\n    static mix(q1: Quat, q2: Quat, time: number): Quat {\n        const dest = new Quat();\n\n        const cosHalfTheta = q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w;\n\n        if (Math.abs(cosHalfTheta) >= 1.0) {\n            dest.xyzw = q1.xyzw;\n\n            return dest;\n        }\n\n        const halfTheta = Math.acos(cosHalfTheta);\n        const sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);\n\n        if (Math.abs(sinHalfTheta) < 0.001) {\n            dest.x = q1.x * 0.5 + q2.x * 0.5;\n            dest.y = q1.y * 0.5 + q2.y * 0.5;\n            dest.z = q1.z * 0.5 + q2.z * 0.5;\n            dest.w = q1.w * 0.5 + q2.w * 0.5;\n\n            return dest;\n        }\n\n        const ratioA = Math.sin((1 - time) * halfTheta) / sinHalfTheta;\n        const ratioB = Math.sin(time * halfTheta) / sinHalfTheta;\n\n        dest.x = q1.x * ratioA + q2.x * ratioB;\n        dest.y = q1.y * ratioA + q2.y * ratioB;\n        dest.z = q1.z * ratioA + q2.z * ratioB;\n        dest.w = q1.w * ratioA + q2.w * ratioB;\n\n        return dest;\n    }\n\n    static fromAxisAngle(axis: Vector, angle: number): Quat {\n        if (axis.rows !== 3) throw new Error('The axis vector must be in 3D!');\n        const dest = new Quat();\n\n        angle *= 0.5;\n        const sin = Math.sin(angle);\n\n        dest.x = axis.at(0) * sin;\n        dest.y = axis.at(1) * sin;\n        dest.z = axis.at(2) * sin;\n        dest.w = Math.cos(angle);\n\n        return dest;\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}