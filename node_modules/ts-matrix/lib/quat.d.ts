import Vector from './Vector';
/**
 * Class representing a Math Quat
 *
 * TODO: To refactor with 'Matrix.ts' style.
 */
export default class Quat {
    get x(): number;
    set x(value: number);
    get y(): number;
    set y(value: number);
    get z(): number;
    set z(value: number);
    get w(): number;
    set w(value: number);
    get xy(): [number, number];
    set xy(values: [number, number]);
    get xyz(): [number, number, number];
    set xyz(values: [number, number, number]);
    get xyzw(): [number, number, number, number];
    set xyzw(values: [number, number, number, number]);
    constructor(values?: [number, number, number, number]);
    private values;
    static readonly identity: Quat;
    at(index: number): number;
    reset(): void;
    copy(dest?: Quat): Quat;
    roll(): number;
    pitch(): number;
    yaw(): number;
    equals(vector: Quat, threshold?: number): boolean;
    setIdentity(): Quat;
    calculateW(): Quat;
    inverse(): Quat;
    conjugate(): Quat;
    length(): number;
    normalize(dest?: Quat): Quat;
    add(other: Quat): Quat;
    multiply(other: Quat): Quat;
    static dot(q1: Quat, q2: Quat): number;
    static sum(q1: Quat, q2: Quat): Quat;
    static product(q1: Quat, q2: Quat): Quat;
    static cross(q1: Quat, q2: Quat): Quat;
    static shortMix(q1: Quat, q2: Quat, time: number): Quat;
    static mix(q1: Quat, q2: Quat, time: number): Quat;
    static fromAxisAngle(axis: Vector, angle: number): Quat;
}
