export default class Vector {
    /** Values of the vector */
    private _values;
    constructor(values?: number[]);
    get rows(): number;
    get values(): number[];
    /**
     * Set values into the vector.
     * If the parameters vector is to wide, the values are cropped to the current vector size.
     * It the parameters vector is to small, remaining cells will be filled with 0.
     * @param newValues Arrays of new values.
     */
    set values(newValues: number[]);
    /**
     * Get a matrix value, from its position
     * @param row Matrix line, from 0 to `rows`
     */
    at(row: number): number;
    /**
     * Sets all matrix values to 0
     */
    reset(): void;
    /**
     * Add an new row to the matrix, filled with 0
     */
    addAValue(): Vector;
    /**
     * Check if two matrix are equals, value by value
     * @param mat The matrix against to check equality
     */
    equals(vec: Vector): boolean;
    /**
     * Negate all values of the vector (get the opposite sign)
     * @return A new vector whose all values have the opposed sign
     */
    negate(): Vector;
    /** Get the length of the vector */
    length(): number;
    /** Get the squared length of the vector */
    squaredLength(): number;
    /**
     * Add all vector values with the same position value of the operand vector
     * @param vector The operand vector
     * @throws Error if the two vectors don't have the same dimension
     * @return a new Vector with the result values
     */
    add(vector: Vector): Vector;
    /**
     * Sunstract all vector values with the same position value of the operand vector
     * @param vector The operand vector
     * @throws Error if the two vectors don't have the same dimension
     * @return a new Vector with the result values
     */
    substract(vector: Vector): Vector;
    /**
     * Multiply all vector values with the same position value of the operand vector
     * @param vector The operand vector
     * @throws Error if the two vectors don't have the same dimension
     * @return a new Vector with the result values
     */
    multiply(vector: Vector): Vector;
    /**
     * Divide all vector values with the same position value of the operand vector
     * Be aware of divisions by 0!
     * @param vector The operand vector
     * @throws Error if the two vectors don't have the same dimension
     * @return a new Vector with the result values
     */
    divide(vector: Vector): Vector;
    /**
     * Multiply all vector values by the given number
     * @param scale The number to multiply with the values
     */
    scale(scale: number): Vector;
    /**
     * Run a function on all vector values, as a map.
     * @param operation The mapping method
     * @return a new Vector with the operation done on all its values
     */
    private operateOnAllValues;
    /**
     * Computes the normalized vector
     * @return The normalized vector
     */
    normalize(): Vector;
    /**
     * Computes the dot product of vectors
     * @param vector The operand vector
     */
    dot(vector: Vector): number;
    /**
     * Computes the cross product of vectors
     * @param vector The operand vector
     */
    cross(vector: Vector): Vector;
    mix(vector: Vector, time: number): Vector;
    static get360angle(Va: Vector, Vb: Vector): number;
}
