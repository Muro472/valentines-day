export default class Matrix {
    /** Number of rows of the matrix */
    private _rows;
    /** Number of columns of the matrix */
    private _columns;
    /** Values of the matrix as a two dimensional array */
    private _values;
    constructor(rows: number, columns: number, values?: number[][]);
    get rows(): number;
    get columns(): number;
    get values(): number[][];
    /**
     * Set values into the matrix.
     * If the parameters matrix is to wide, the values are cropped to the current matrix size.
     * It the parameters matrix is to small, remaining cells will be filled with 0.
     * @param newValues Arrays of new values.
     */
    set values(newValues: number[][]);
    /**
     * Get a matrix value, from its position
     * @param row Matrix line, from 0 to `rows`
     * @param col Matric column, from 0 to `columns`
     */
    at(row: number, col: number): number;
    /**
     * Sets all matrix values to 0
     */
    reset(): void;
    /**
     * Add an new column to the matrix, filled with 0
     */
    addAColumn(): Matrix;
    /**
     * Add an new row to the matrix, filled with 0
     */
    addARow(): Matrix;
    /**
     * Check if two matrix are equals, value by value
     * @param mat The matrix against to check equality
     */
    equals(mat: Matrix): boolean;
    /**
     * Sets the matrix as an identity matrix
     */
    setAsIdentity(): this;
    /**
     * Gets an identity matrix (1 on diagonal)
     * @param dimension Dimension of the squared matrix
     */
    static identity(dimension: number): Matrix;
    /**
     * Computes the product with another matrix
     * @param mat The second operand matrix
     * @throws Error if matrixA.columns != matrixB.rows
     * @return A new Matrix, result of the multiplication
     */
    multiply(mat: Matrix): Matrix;
    /**
     * Computes the determinant of the matrix
     * @throws Error if the matrix is not squared
     */
    determinant(): number;
    /**
     * Gets a cofactor matrix
     * @param row The row to omit in the matrix
     * @param col The column to omit in the matrix
     * @return The cofactor matrix sized (r-1)x(c-1)
     */
    getCofactor(row: number, col: number): Matrix;
    /**
     * Computes a transposed the matrix
     * @return A new matrix sized (columns) x (rows)
     */
    transpose(): Matrix;
    /**
     * Computes the inversed matrix
     * @return A new matrix inversed
     */
    inverse(): Matrix;
}
