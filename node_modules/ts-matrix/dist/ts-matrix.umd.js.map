{"version":3,"file":"ts-matrix.umd.js","sources":["../src/Matrix.ts","../src/Vector.ts","../src/constants.ts","../src/quat.ts"],"sourcesContent":["export default class Matrix {\n\n    /** Number of rows of the matrix */\n    private _rows: number;\n    /** Number of columns of the matrix */\n    private _columns: number;\n    /** Values of the matrix as a two dimensional array */\n    private _values: number[][];\n\n    constructor(rows: number, columns: number, values?: number[][]) {\n        this._rows = Math.max(rows, 1);\n        this._columns = Math.max(columns, 1);\n        // Create matrix filled with 0 by default\n        this._values = new Array<number[]>(this._rows).fill([]).map(() => new Array<number>(this._columns).fill(0));\n\n        if (values) {\n            this.values = values;\n        }\n    }\n\n    get rows() {\n        return this._rows;\n    }\n    get columns() {\n        return this._columns;\n    }\n    get values() {\n        return this._values;\n    }\n\n    /**\n     * Set values into the matrix.\n     * If the parameters matrix is to wide, the values are cropped to the current matrix size.\n     * It the parameters matrix is to small, remaining cells will be filled with 0.\n     * @param newValues Arrays of new values.\n     */\n    set values(newValues: number[][]) {\n        const minRow = Math.min(newValues.length, this.rows);\n        const minCol = Math.min(newValues[0].length, this.columns);\n        for (let r = 0; r < minRow; r++) {\n            for (let c = 0; c < minCol; c++) {\n                this.values[r][c] = newValues[r][c];\n            }\n        }\n    }\n\n    /**\n     * Get a matrix value, from its position\n     * @param row Matrix line, from 0 to `rows`\n     * @param col Matric column, from 0 to `columns`\n     */\n    at(row: number, col: number): number {\n        return this.values[row][col];\n    }\n\n    /**\n     * Sets all matrix values to 0\n     */\n    reset(): void {\n        this.values = this.values.map((row) => row.map(() => 0));\n    }\n\n    /**\n     * Add an new column to the matrix, filled with 0\n     */\n    addAColumn(): Matrix {\n        return new Matrix(this.rows, this.columns + 1, this.values);\n    }\n\n    /**\n     * Add an new row to the matrix, filled with 0\n     */\n    addARow(): Matrix {\n        return new Matrix(this.rows + 1, this.columns, this.values);\n    }\n\n    /**\n     * Check if two matrix are equals, value by value\n     * @param mat The matrix against to check equality\n     */\n    equals(mat: Matrix): boolean {\n        // Reduce on rows -> reduce on columns -> if a value != then false!\n        return (this.rows === mat.rows && this.columns === mat.columns)\n            && this.values.reduce(// Rows\n                (eql: boolean, row, i) => eql && row.reduce(// Columns (real values)\n                        (eql2: boolean, val, j) => eql2 && mat.at(i, j) === val, eql)\n                , true);\n    }\n\n    /**\n     * Sets the matrix as an identity matrix\n     */\n    setAsIdentity() {\n        if (this.rows !== this.columns) throw new Error(\"Dimension error! The matrix isn't squared!\");\n        this.values.forEach((row, i) => {\n            row.forEach((c, j) => {\n                this.values[i][j] = i === j ? 1 : 0;\n            });\n        });\n        return this;\n    }\n\n    /**\n     * Gets an identity matrix (1 on diagonal)\n     * @param dimension Dimension of the squared matrix\n     */\n    static identity(dimension: number): Matrix {\n        if (dimension < 1) throw Error('Dimension error! Matrix dimension must be positive.');\n        return new Matrix(dimension, dimension).setAsIdentity();\n    }\n\n    /**\n     * Computes the product with another matrix\n     * @param mat The second operand matrix\n     * @throws Error if matrixA.columns != matrixB.rows\n     * @return A new Matrix, result of the multiplication\n     */\n    multiply(mat: Matrix): Matrix {\n        if (this.columns !== mat.rows) throw new Error(\"Dimension error! The operand matrix must have the same number of rows as 'this' matrix columns!\");\n        const resMatrix = new Matrix(this.rows, mat.columns);\n        resMatrix.values = resMatrix.values.map((row, i) => {\n            return row.map((val, j) => {\n                return this.values[i].reduce((sum, elm, k) => sum + (elm * mat.at(k, j)), 0);\n            });\n        });\n        return resMatrix;\n    }\n\n    /**\n     * Computes the determinant of the matrix\n     * @throws Error if the matrix is not squared\n     */\n    determinant(): number {\n        if (this.rows !== this.columns) throw new Error(\"Dimension error! The matrix isn't squared!\");\n        if (this.rows === this.columns && this.columns === 1) { return this.values[0][0]; }\n\n        let det = 0;\n        let sign = 1;\n        if (this.rows === 2) {\n            det = this.values[0][0] * this.values[1][1] - this.values[1][0] * this.values[0][1];\n        } else {\n            for (let i = 0; i < this.rows; i++) {\n                const minor = this.getCofactor(0, i);\n                det += sign * this.at(0, i) * minor.determinant();\n                sign = -sign;\n            }\n        }\n        return det;\n    }\n\n    /**\n     * Gets a cofactor matrix\n     * @param row The row to omit in the matrix\n     * @param col The column to omit in the matrix\n     * @return The cofactor matrix sized (r-1)x(c-1)\n     */\n    getCofactor(row: number, col: number): Matrix {\n        return new Matrix(this.rows - 1, this.columns - 1, this.values\n            .filter((v, i) => i !== row) // Remove the unnecessary row\n            .map((c) => c.filter((v, i) => i !== col)));\n    }\n\n    /**\n     * Computes a transposed the matrix\n     * @return A new matrix sized (columns) x (rows)\n     */\n    transpose(): Matrix {\n        return new Matrix(this.columns, this.rows, new Array<number[]>(this.columns).fill([])\n            .map((row, i) => new Array<number>(this.rows).fill(0).map((c, j) => this.at(j, i))));\n    }\n\n    /**\n     * Computes the inversed matrix\n     * @return A new matrix inversed\n     */\n    inverse() {\n        if (this.rows !== this.columns) throw new Error(\"Dimension error! The matrix isn't squared!\");\n        const det = this.determinant();\n        if (det === 0) throw new Error(\"Determinant is 0, can't compute inverse.\");\n\n        // Get cofactor matrix: i.e. for each matrix value, get the cofactor's determinant\n        const cofactorMatrix = new Matrix (this.rows, this.columns,\n            this.values.map((row, i) => row.map((val, j) => {\n                const sign = Math.pow(-1, i + j);\n                return sign * this.getCofactor(i, j).determinant();\n            })));\n        // Transpose it\n        const transposedCofactor = cofactorMatrix.transpose();\n        // Compute inverse of transposed / determinant on each value\n        return new Matrix(this.rows, this.columns,\n            this.values.map((row, i) => row.map((val, j) => transposedCofactor.at(i, j) / det)));\n    }\n\n}\n","export default class Vector {\n\n    /** Values of the vector */\n    private _values: number[];\n\n    constructor(values?: number[]) {\n        // Create matrix filled with 0 by default\n        this._values = new Array<number>((values || [0]).length).fill(0);\n\n        if (values) {\n            this.values = values;\n        }\n    }\n\n    get rows() {\n        return this.values.length;\n    }\n\n    get values() {\n        return this._values;\n    }\n\n    /**\n     * Set values into the vector.\n     * If the parameters vector is to wide, the values are cropped to the current vector size.\n     * It the parameters vector is to small, remaining cells will be filled with 0.\n     * @param newValues Arrays of new values.\n     */\n    set values(newValues: number[]) {\n        const minSize = Math.min(this.values.length, newValues.length);\n        for (let i = 0; i < minSize; i++) {\n            this.values[i] = newValues[i];\n        }\n    }\n\n    /**\n     * Get a matrix value, from its position\n     * @param row Matrix line, from 0 to `rows`\n     */\n    at(row: number): number {\n        return this.values[row];\n    }\n\n    /**\n     * Sets all matrix values to 0\n     */\n    reset(): void {\n        this.values = this.values.fill(0);\n    }\n\n    /**\n     * Add an new row to the matrix, filled with 0\n     */\n    addAValue(): Vector {\n        this.values.push(0);\n        return new Vector(this.values);\n    }\n\n    /**\n     * Check if two matrix are equals, value by value\n     * @param mat The matrix against to check equality\n     */\n    equals(vec: Vector): boolean {\n        return (this.rows === vec.rows)\n            && this.values.reduce((eql: boolean, val, i) => eql && vec.at(i) === val, true);\n    }\n\n    /**\n     * Negate all values of the vector (get the opposite sign)\n     * @return A new vector whose all values have the opposed sign\n     */\n    negate(): Vector {\n        return new Vector(this.values.map((val) => -val));\n    }\n\n    /** Get the length of the vector */\n    length(): number {\n        return Math.sqrt(this.squaredLength());\n    }\n\n    /** Get the squared length of the vector */\n    squaredLength(): number {\n        return this.dot(this);\n    }\n\n    /**\n     * Add all vector values with the same position value of the operand vector\n     * @param vector The operand vector\n     * @throws Error if the two vectors don't have the same dimension\n     * @return a new Vector with the result values\n     */\n    add(vector: Vector): Vector {\n        if (this.rows !== vector.rows) throw new Error(\"Vectors don't have the same dimension!\");\n        return this.operateOnAllValues((val, i) => (val + vector.at(i)));\n    }\n\n    /**\n     * Sunstract all vector values with the same position value of the operand vector\n     * @param vector The operand vector\n     * @throws Error if the two vectors don't have the same dimension\n     * @return a new Vector with the result values\n     */\n    substract(vector: Vector): Vector {\n        if (this.rows !== vector.rows) throw new Error(\"Vectors don't have the same dimension!\");\n        return this.operateOnAllValues((val, i) => (val - vector.at(i)));\n    }\n\n    /**\n     * Multiply all vector values with the same position value of the operand vector\n     * @param vector The operand vector\n     * @throws Error if the two vectors don't have the same dimension\n     * @return a new Vector with the result values\n     */\n    multiply(vector: Vector): Vector {\n        if (this.rows !== vector.rows) throw new Error(\"Vectors don't have the same dimension!\");\n        return this.operateOnAllValues((val, i) => (val * vector.at(i)));\n    }\n\n    /**\n     * Divide all vector values with the same position value of the operand vector\n     * Be aware of divisions by 0!\n     * @param vector The operand vector\n     * @throws Error if the two vectors don't have the same dimension\n     * @return a new Vector with the result values\n     */\n    divide(vector: Vector): Vector {\n        if (this.rows !== vector.rows) throw new Error(\"Vectors don't have the same dimension!\");\n        return this.operateOnAllValues((val, i) => {\n            if (vector.at(i) === 0) return val;\n            return (val / vector.at(i));\n        });\n    }\n\n    /**\n     * Multiply all vector values by the given number\n     * @param scale The number to multiply with the values\n     */\n    scale(scale: number): Vector {\n        return this.operateOnAllValues((val) => (val * scale));\n    }\n\n    /**\n     * Run a function on all vector values, as a map.\n     * @param operation The mapping method\n     * @return a new Vector with the operation done on all its values\n     */\n    private operateOnAllValues(operation: (val: number, index: number) => number): Vector {\n        return new Vector(this.values.map(operation));\n    }\n\n    /**\n     * Computes the normalized vector\n     * @return The normalized vector\n     */\n    normalize(): Vector {\n        const vectorLength = this.length();\n        return this.operateOnAllValues((val) => val / vectorLength);\n    }\n\n    /**\n     * Computes the dot product of vectors\n     * @param vector The operand vector\n     */\n    dot(vector: Vector): number {\n        return this.values.reduce((res, val, i) => res + (val * vector.at(i)), 0);\n    }\n\n    /**\n     * Computes the cross product of vectors\n     * @param vector The operand vector\n     */\n    cross(vector: Vector): Vector {\n        if (this.rows < 3 || vector.rows < 3) throw new Error('Cross product is possible on 3D vectors only');\n        const crossValues = new Array<number>(3);\n        crossValues[0] = this.at(1) * vector.at(2) - this.at(2) * vector.at(1);\n        crossValues[1] = this.at(2) * vector.at(0) - this.at(0) * vector.at(2);\n        crossValues[2] = this.at(0) * vector.at(1) - this.at(1) * vector.at(0);\n        return new Vector(crossValues);\n    }\n\n    mix(vector: Vector, time: number): Vector {\n        return new Vector(this.values.map((val, i) => val + time * (vector.at(i) - val)));\n    }\n\n    static get360angle(Va: Vector, Vb: Vector) {\n        if (Va.rows !== 3 || Vb.rows !== 3) throw new Error('Vectors must be in 3D!. You can add a 1 dimension if it is missing.');\n        return -Math.atan2(\n          Vb.cross(Va).dot(new Vector([0, 0, 1]).normalize()),\n          Va.dot(Vb)\n        );\n      }\n}\n","export const EPSILON = 0.00001;\n","import { EPSILON } from './constants';\nimport Vector from './Vector';\n\n/**\n * Class representing a Math Quat\n *\n * TODO: To refactor with 'Matrix.ts' style.\n */\nexport default class Quat {\n\n    get x(): number {\n        return this.values[0];\n    }\n\n    set x(value: number) {\n        this.values[0] = value;\n    }\n\n    get y(): number {\n        return this.values[1];\n    }\n\n    set y(value: number) {\n        this.values[1] = value;\n    }\n\n    get z(): number {\n        return this.values[2];\n    }\n\n    set z(value: number) {\n        this.values[2] = value;\n    }\n    \n    get w(): number {\n        return this.values[3];\n    }\n    \n    set w(value: number) {\n        this.values[3] = value;\n    }\n\n    get xy(): [number, number] {\n        return [\n            this.values[0],\n            this.values[1],\n        ];\n    }\n\n    set xy(values: [number, number]) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n    }\n\n\n    get xyz(): [number, number, number] {\n        return [\n            this.values[0],\n            this.values[1],\n            this.values[2],\n        ];\n    }\n\n    set xyz(values: [number, number, number]) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n        this.values[2] = values[2];\n    }\n\n    get xyzw(): [number, number, number, number] {\n        return [\n            this.values[0],\n            this.values[1],\n            this.values[2],\n            this.values[3],\n        ];\n    }\n\n    set xyzw(values: [number, number, number, number]) {\n        this.values[0] = values[0];\n        this.values[1] = values[1];\n        this.values[2] = values[2];\n        this.values[3] = values[3];\n    }\n\n    constructor(values?: [number, number, number, number]) {\n        if (values !== undefined) {\n            this.xyzw = values;\n        }\n    }\n\n    private values = new Float32Array(4);\n\n    static readonly identity = new Quat().setIdentity();\n\n    at(index: number): number {\n        return this.values[index];\n    }\n\n    reset(): void {\n        for (let i = 0; i < 4; i++) {\n            this.values[i] = 0;\n        }\n    }\n\n    copy(dest?: Quat): Quat {\n        if (!dest) { dest = new Quat(); }\n\n        for (let i = 0; i < 4; i++) {\n            dest.values[i] = this.values[i];\n        }\n\n        return dest;\n    }\n\n    roll(): number {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n\n        return Math.atan2(2.0 * (x * y + w * z), w * w + x * x - y * y - z * z);\n    }\n\n    pitch(): number {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n\n        return Math.atan2(2.0 * (y * z + w * x), w * w - x * x - y * y + z * z);\n    }\n\n    yaw(): number {\n        return Math.asin(2.0 * (this.x * this.z - this.w * this.y));\n    }\n\n    equals(vector: Quat, threshold = EPSILON): boolean {\n        for (let i = 0; i < 4; i++) {\n            if (Math.abs(this.values[i] - vector.at(i)) > threshold) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    setIdentity(): Quat {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 1;\n\n        return this;\n    }\n\n    calculateW(): Quat {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n\n        this.w = -(Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z)));\n\n        return this;\n    }\n\n    inverse(): Quat {\n        const dot = Quat.dot(this, this);\n\n        if (!dot) {\n            this.xyzw = [0, 0, 0, 0];\n\n            return this;\n        }\n\n        const invDot = dot ? 1.0 / dot : 0;\n\n        this.x *= -invDot;\n        this.y *= -invDot;\n        this.z *= -invDot;\n        this.w *= invDot;\n\n        return this;\n    }\n\n    conjugate(): Quat {\n        this.values[0] *= -1;\n        this.values[1] *= -1;\n        this.values[2] *= -1;\n\n        return this;\n    }\n\n    length(): number {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n\n        return Math.sqrt(x * x + y * y + z * z + w * w);\n    }\n\n    normalize(dest?: Quat): Quat {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        if (!dest) { dest = this; }\n\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n\n        let length = Math.sqrt(x * x + y * y + z * z + w * w);\n\n        if (!length) {\n            dest.x = 0;\n            dest.y = 0;\n            dest.z = 0;\n            dest.w = 0;\n\n            return dest;\n        }\n\n        length = 1 / length;\n\n        dest.x = x * length;\n        dest.y = y * length;\n        dest.z = z * length;\n        dest.w = w * length;\n\n        return dest;\n    }\n\n    add(other: Quat): Quat {\n        for (let i = 0; i < 4; i++) {\n            this.values[i] += other.at(i);\n        }\n\n        return this;\n    }\n\n    multiply(other: Quat): Quat {\n        const q1x = this.values[0];\n        const q1y = this.values[1];\n        const q1z = this.values[2];\n        const q1w = this.values[3];\n\n        const q2x = other.x;\n        const q2y = other.y;\n        const q2z = other.z;\n        const q2w = other.w;\n\n        this.x = q1x * q2w + q1w * q2x + q1y * q2z - q1z * q2y;\n        this.y = q1y * q2w + q1w * q2y + q1z * q2x - q1x * q2z;\n        this.z = q1z * q2w + q1w * q2z + q1x * q2y - q1y * q2x;\n        this.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;\n\n        return this;\n    }\n\n    static dot(q1: Quat, q2: Quat): number {\n        return q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w;\n    }\n\n    static sum(q1: Quat, q2: Quat): Quat {\n        const dest = new Quat();\n\n        dest.x = q1.x + q2.x;\n        dest.y = q1.y + q2.y;\n        dest.z = q1.z + q2.z;\n        dest.w = q1.w + q2.w;\n\n        return dest;\n    }\n\n    static product(q1: Quat, q2: Quat): Quat {\n        const dest = new Quat();\n\n        const q1x = q1.x;\n        const q1y = q1.y;\n        const q1z = q1.z;\n        const q1w = q1.w;\n\n        const q2x = q2.x;\n        const q2y = q2.y;\n        const q2z = q2.z;\n        const q2w = q2.w;\n\n        dest.x = q1x * q2w + q1w * q2x + q1y * q2z - q1z * q2y;\n        dest.y = q1y * q2w + q1w * q2y + q1z * q2x - q1x * q2z;\n        dest.z = q1z * q2w + q1w * q2z + q1x * q2y - q1y * q2x;\n        dest.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;\n\n        return dest;\n    }\n\n    static cross(q1: Quat, q2: Quat): Quat {\n        const dest = new Quat();\n\n        const q1x = q1.x;\n        const q1y = q1.y;\n        const q1z = q1.z;\n        const q1w = q1.w;\n\n        const q2x = q2.x;\n        const q2y = q2.y;\n        const q2z = q2.z;\n        const q2w = q2.w;\n\n        dest.x = q1w * q2z + q1z * q2w + q1x * q2y - q1y * q2x;\n        dest.y = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;\n        dest.z = q1w * q2x + q1x * q2w + q1y * q2z - q1z * q2y;\n        dest.w = q1w * q2y + q1y * q2w + q1z * q2x - q1x * q2z;\n\n        return dest;\n    }\n\n    static shortMix(q1: Quat, q2: Quat, time: number): Quat {\n        const dest = new Quat();\n\n        if (time <= 0.0) {\n            dest.xyzw = q1.xyzw;\n\n            return dest;\n        } else if (time >= 1.0) {\n            dest.xyzw = q2.xyzw;\n\n            return dest;\n        }\n\n        let cos = Quat.dot(q1, q2);\n        const q2a = q2.copy();\n\n        if (cos < 0.0) {\n            q2a.inverse();\n            cos = -cos;\n        }\n\n        let k0: number;\n        let k1: number;\n\n        if (cos > 0.9999) {\n            k0 = 1 - time;\n            k1 = 0 + time;\n        } else {\n            const sin: number = Math.sqrt(1 - cos * cos);\n            const angle: number = Math.atan2(sin, cos);\n\n            const oneOverSin: number = 1 / sin;\n\n            k0 = Math.sin((1 - time) * angle) * oneOverSin;\n            k1 = Math.sin((0 + time) * angle) * oneOverSin;\n        }\n\n        dest.x = k0 * q1.x + k1 * q2a.x;\n        dest.y = k0 * q1.y + k1 * q2a.y;\n        dest.z = k0 * q1.z + k1 * q2a.z;\n        dest.w = k0 * q1.w + k1 * q2a.w;\n\n        return dest;\n    }\n\n    static mix(q1: Quat, q2: Quat, time: number): Quat {\n        const dest = new Quat();\n\n        const cosHalfTheta = q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w;\n\n        if (Math.abs(cosHalfTheta) >= 1.0) {\n            dest.xyzw = q1.xyzw;\n\n            return dest;\n        }\n\n        const halfTheta = Math.acos(cosHalfTheta);\n        const sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);\n\n        if (Math.abs(sinHalfTheta) < 0.001) {\n            dest.x = q1.x * 0.5 + q2.x * 0.5;\n            dest.y = q1.y * 0.5 + q2.y * 0.5;\n            dest.z = q1.z * 0.5 + q2.z * 0.5;\n            dest.w = q1.w * 0.5 + q2.w * 0.5;\n\n            return dest;\n        }\n\n        const ratioA = Math.sin((1 - time) * halfTheta) / sinHalfTheta;\n        const ratioB = Math.sin(time * halfTheta) / sinHalfTheta;\n\n        dest.x = q1.x * ratioA + q2.x * ratioB;\n        dest.y = q1.y * ratioA + q2.y * ratioB;\n        dest.z = q1.z * ratioA + q2.z * ratioB;\n        dest.w = q1.w * ratioA + q2.w * ratioB;\n\n        return dest;\n    }\n\n    static fromAxisAngle(axis: Vector, angle: number): Quat {\n        if (axis.rows !== 3) throw new Error('The axis vector must be in 3D!');\n        const dest = new Quat();\n\n        angle *= 0.5;\n        const sin = Math.sin(angle);\n\n        dest.x = axis.at(0) * sin;\n        dest.y = axis.at(1) * sin;\n        dest.z = axis.at(2) * sin;\n        dest.w = Math.cos(angle);\n\n        return dest;\n    }\n\n}\n"],"names":["Matrix","rows","columns","values","__publicField","newValues","minRow","minCol","c","row","col","mat","eql","i","eql2","val","j","dimension","resMatrix","sum","elm","k","det","sign","minor","v","transposedCofactor","Vector","minSize","vec","vector","scale","operation","vectorLength","res","crossValues","time","Va","Vb","EPSILON","_Quat","value","index","dest","x","y","z","w","threshold","dot","invDot","length","other","q1x","q1y","q1z","q1w","q2x","q2y","q2z","q2w","q1","q2","cos","q2a","k0","k1","sin","angle","oneOverSin","cosHalfTheta","halfTheta","sinHalfTheta","ratioA","ratioB","axis","Quat"],"mappings":"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"}